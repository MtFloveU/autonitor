### FILE: ./code.txt


### FILE: ./core/data_processor.dart
import 'dart:convert';
import '../models/account.dart';
import '../models/cache_data.dart';
import '../models/twitter_user.dart';

class DataProcessor {
  final Account account;
  DataProcessor({required this.account});

  // 模拟文件系统，用于存储缓存和commit
  final Map<String, String> _fileSystem = {};

  /// 运行核心分析流程
  Future<void> runProcess() async {
    // 模拟耗时操作，例如API请求和数据比较
    final latestUsers = _fetchLatestUserData();
    _generateCache(latestUsers);
  }

  /// 从模拟文件系统中获取缓存数据
  Future<CacheData?> getCacheData() async {
    // 为每个账号使用独立的缓存文件
    final cacheJson = _fileSystem['cache_${account.id}.json'];
    if (cacheJson != null) {
      try {
         return CacheData.fromJson(jsonDecode(cacheJson));
      } catch (e) {
         // 在真实应用中处理错误，例如删除无效缓存
         print("Error decoding cache data: $e");
         return null;
      }
    }
    return null;
  }
  
  /// 获取特定分类的用户列表
  Future<List<TwitterUser>> getUsers(String category) async {
    // 根据分类返回不同的模拟数据列表
    await Future.delayed(const Duration(seconds: 1));
    if (category == 'followers') {
      return _fetchLatestUserData().values.toList();
    }
    if (category == 'normal_unfollowed') {
       return [
        // 使用 const 构造函数，并确保所有字段都提供了值或 null
        const TwitterUser(id: "unfollowed1", name: "Unfollowed User 1", restId: "u1", avatarUrl: "", joinTime: 'Wed Apr 12 05:43:13 +0000 2023', bio: 'unfollowed 1', location: 'unfo1', bannerUrl: null, link: null, followersCount: 1200, followingCount: 100),
        const TwitterUser(id: "unfollowed2", name: "Unfollowed User 2", restId: "u2", avatarUrl: "", joinTime: 'Wed Apr 12 05:43:14 +0000 2023', bio: 'unfollowed 2', location: 'unfo2', bannerUrl: null, link: null, followersCount: 1200, followingCount: 100),
      ];
    }
    if (category == 'following') {
        return []; // 明确返回空列表
    }
    // 对于其他未实现的分类，返回空列表
    return [];
  }

  /// 生成UI直接使用的缓存文件
  void _generateCache(Map<String, TwitterUser> latestState) {
    // 模拟从API获取用户名
    final profileNameFromApi = "User_${account.id.substring(0, 5)}";

    final cacheContent = CacheData(
      accountName: profileNameFromApi,
      accountId: account.id,
      lastUpdateTime: DateTime.now().toIso8601String(),
      followersCount: latestState.length,
      followingCount: 0, // 模拟数据
      unfollowedCount: 12,
      mutualUnfollowedCount: 5,
      singleUnfollowedCount: 7,
      frozenCount: 2,
      deactivatedCount: 1,
      refollowedCount: 3,
      newFollowersCount: 8,
    );

    // 将缓存数据写入模拟文件系统
    try {
      _fileSystem['cache_${account.id}.json'] = jsonEncode(cacheContent.toJson());
    } catch (e) {
       print("Error encoding cache data: $e");
    }
  }

  /// 模拟从API获取最新的用户数据
  Map<String, TwitterUser> _fetchLatestUserData() {
    return {
      // 使用 const 构造函数，并确保所有字段都提供了值或 null
      "user1": const TwitterUser(id: "user1", name: "User One (upd)", restId: "1234567890", bio: "Hello everyone, this is User 1 checking in. I'm here and ready to participate in the discussion.", location: "User 1 Location", joinTime: "Wed Apr 12 05:43:13 +0000 2023", avatarUrl: "", bannerUrl: null, link: 'https://example.com', followersCount: 1200, followingCount: 100),
      "user2": const TwitterUser(id: "user2", name: "User Two", restId: "2", bio: "This is user 2", location: "User 2 Location", joinTime: "Wed Apr 12 05:43:14 +0000 2023", avatarUrl: "", bannerUrl: null, link: null, followersCount: 1200, followingCount: 100),
      "user4": const TwitterUser(id: "user4", name: "User Four", restId: "4", bio: "This is user 4", location: "User 4 Location", joinTime: "Wed Apr 12 05:43:15 +0000 2023", avatarUrl: "", bannerUrl: null, link: null, followersCount: 1200, followingCount: 100),
    };
  }
}



### FILE: ./l10n/app_en.arb
{
  "@@locale": "en",
  "language": "Language",
  "@language": {
    "description": "Label for the language setting"
  },
  "app_title": "Autonitor",
  "settings": "Settings",
  "home": "Home",
  "data": "Data",
  "accounts": "Accounts",
  "switchAccount": "Switch Account",
  "followers": "Followers",
  "following": "Following",
  "new_account": "Add a new account",
  "view_cookie": "View Cookie",
  "close": "Close",
  "view_on_twitter": "View on Twitter",
  "metadata": "Metadata",
  "tweets": "Tweets",
  "media_count": "Media Count",
  "likes": "Likes",
  "listed_count": "Listed Count",
  "identity": "Identity-related",
  "back": "Back",
  "history": "History",
  "suspended": "Suspended",
  "deactivated": "Deactivated",
  "normal_unfollowed": "Normal Unfollowed",
  "be_followed_back": "Be Followed Back",
  "mutual_unfollowed": "Mutual Unfollowed",
  "oneway_unfollowed": "One-way Unfollowed",
  "new_followers_following": "New Followers & Following",
  "empty_list_message": "The list is empty",
  "switch_account": "Switch Account",
  "run": "Run",
  "choose_login_method": "Choose Login Method",
  "browser_login": "Login via Browser",
  "manual_cookie": "Manual Cookie Input",
  "joined": "Joined",
  "im_logged_in": "I've logged in",
  "cancel": "Cancel",
  "ok": "OK",
  "account_added_successfully": "Account added successfully!",
  "saving_account": "Saving account...",
  "cookie": "Cookie",
  "no_cookie_found": "No cookie found",
  "no_auth_token_found": "No auth_token found",
  "found_auth_token_last_check": "Auth Token found in last check",
  "general": "General",
  "login_first": "Log in Needed",
  "login_first_description": "Add at least one account to continue",
  "log_in": "Log In",
  "delete": "Delete",
  "confirm_delete_account": "Are you sure you want to delete account {accountId}? This action cannot be undone.",
    "@confirm_delete_account": {
    "placeholders": {
      "accountId": {
        "description": "The ID of the account to be deleted"
      }
    }
  }
}

### FILE: ./l10n/app_localizations.dart
import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:intl/intl.dart' as intl;

import 'app_localizations_en.dart';
import 'app_localizations_zh.dart';

// ignore_for_file: type=lint

/// Callers can lookup localized strings with an instance of AppLocalizations
/// returned by `AppLocalizations.of(context)`.
///
/// Applications need to include `AppLocalizations.delegate()` in their app's
/// `localizationDelegates` list, and the locales they support in the app's
/// `supportedLocales` list. For example:
///
/// ```dart
/// import 'l10n/app_localizations.dart';
///
/// return MaterialApp(
///   localizationsDelegates: AppLocalizations.localizationsDelegates,
///   supportedLocales: AppLocalizations.supportedLocales,
///   home: MyApplicationHome(),
/// );
/// ```
///
/// ## Update pubspec.yaml
///
/// Please make sure to update your pubspec.yaml to include the following
/// packages:
///
/// ```yaml
/// dependencies:
///   # Internationalization support.
///   flutter_localizations:
///     sdk: flutter
///   intl: any # Use the pinned version from flutter_localizations
///
///   # Rest of dependencies
/// ```
///
/// ## iOS Applications
///
/// iOS applications define key application metadata, including supported
/// locales, in an Info.plist file that is built into the application bundle.
/// To configure the locales supported by your app, you’ll need to edit this
/// file.
///
/// First, open your project’s ios/Runner.xcworkspace Xcode workspace file.
/// Then, in the Project Navigator, open the Info.plist file under the Runner
/// project’s Runner folder.
///
/// Next, select the Information Property List item, select Add Item from the
/// Editor menu, then select Localizations from the pop-up menu.
///
/// Select and expand the newly-created Localizations item then, for each
/// locale your application supports, add a new item and select the locale
/// you wish to add from the pop-up menu in the Value field. This list should
/// be consistent with the languages listed in the AppLocalizations.supportedLocales
/// property.
abstract class AppLocalizations {
  AppLocalizations(String locale)
    : localeName = intl.Intl.canonicalizedLocale(locale.toString());

  final String localeName;

  static AppLocalizations? of(BuildContext context) {
    return Localizations.of<AppLocalizations>(context, AppLocalizations);
  }

  static const LocalizationsDelegate<AppLocalizations> delegate =
      _AppLocalizationsDelegate();

  /// A list of this localizations delegate along with the default localizations
  /// delegates.
  ///
  /// Returns a list of localizations delegates containing this delegate along with
  /// GlobalMaterialLocalizations.delegate, GlobalCupertinoLocalizations.delegate,
  /// and GlobalWidgetsLocalizations.delegate.
  ///
  /// Additional delegates can be added by appending to this list in
  /// MaterialApp. This list does not have to be used at all if a custom list
  /// of delegates is preferred or required.
  static const List<LocalizationsDelegate<dynamic>> localizationsDelegates =
      <LocalizationsDelegate<dynamic>>[
        delegate,
        GlobalMaterialLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
      ];

  /// A list of this localizations delegate's supported locales.
  static const List<Locale> supportedLocales = <Locale>[
    Locale('en'),
    Locale('zh'),
    Locale('zh', 'TW'),
  ];

  /// Label for the language setting
  ///
  /// In en, this message translates to:
  /// **'Language'**
  String get language;

  /// No description provided for @app_title.
  ///
  /// In en, this message translates to:
  /// **'Autonitor'**
  String get app_title;

  /// No description provided for @settings.
  ///
  /// In en, this message translates to:
  /// **'Settings'**
  String get settings;

  /// No description provided for @home.
  ///
  /// In en, this message translates to:
  /// **'Home'**
  String get home;

  /// No description provided for @data.
  ///
  /// In en, this message translates to:
  /// **'Data'**
  String get data;

  /// No description provided for @accounts.
  ///
  /// In en, this message translates to:
  /// **'Accounts'**
  String get accounts;

  /// No description provided for @switchAccount.
  ///
  /// In en, this message translates to:
  /// **'Switch Account'**
  String get switchAccount;

  /// No description provided for @followers.
  ///
  /// In en, this message translates to:
  /// **'Followers'**
  String get followers;

  /// No description provided for @following.
  ///
  /// In en, this message translates to:
  /// **'Following'**
  String get following;

  /// No description provided for @new_account.
  ///
  /// In en, this message translates to:
  /// **'Add a new account'**
  String get new_account;

  /// No description provided for @view_cookie.
  ///
  /// In en, this message translates to:
  /// **'View Cookie'**
  String get view_cookie;

  /// No description provided for @close.
  ///
  /// In en, this message translates to:
  /// **'Close'**
  String get close;

  /// No description provided for @view_on_twitter.
  ///
  /// In en, this message translates to:
  /// **'View on Twitter'**
  String get view_on_twitter;

  /// No description provided for @metadata.
  ///
  /// In en, this message translates to:
  /// **'Metadata'**
  String get metadata;

  /// No description provided for @tweets.
  ///
  /// In en, this message translates to:
  /// **'Tweets'**
  String get tweets;

  /// No description provided for @media_count.
  ///
  /// In en, this message translates to:
  /// **'Media Count'**
  String get media_count;

  /// No description provided for @likes.
  ///
  /// In en, this message translates to:
  /// **'Likes'**
  String get likes;

  /// No description provided for @listed_count.
  ///
  /// In en, this message translates to:
  /// **'Listed Count'**
  String get listed_count;

  /// No description provided for @identity.
  ///
  /// In en, this message translates to:
  /// **'Identity-related'**
  String get identity;

  /// No description provided for @back.
  ///
  /// In en, this message translates to:
  /// **'Back'**
  String get back;

  /// No description provided for @history.
  ///
  /// In en, this message translates to:
  /// **'History'**
  String get history;

  /// No description provided for @suspended.
  ///
  /// In en, this message translates to:
  /// **'Suspended'**
  String get suspended;

  /// No description provided for @deactivated.
  ///
  /// In en, this message translates to:
  /// **'Deactivated'**
  String get deactivated;

  /// No description provided for @normal_unfollowed.
  ///
  /// In en, this message translates to:
  /// **'Normal Unfollowed'**
  String get normal_unfollowed;

  /// No description provided for @be_followed_back.
  ///
  /// In en, this message translates to:
  /// **'Be Followed Back'**
  String get be_followed_back;

  /// No description provided for @mutual_unfollowed.
  ///
  /// In en, this message translates to:
  /// **'Mutual Unfollowed'**
  String get mutual_unfollowed;

  /// No description provided for @oneway_unfollowed.
  ///
  /// In en, this message translates to:
  /// **'One-way Unfollowed'**
  String get oneway_unfollowed;

  /// No description provided for @new_followers_following.
  ///
  /// In en, this message translates to:
  /// **'New Followers & Following'**
  String get new_followers_following;

  /// No description provided for @empty_list_message.
  ///
  /// In en, this message translates to:
  /// **'The list is empty'**
  String get empty_list_message;

  /// No description provided for @switch_account.
  ///
  /// In en, this message translates to:
  /// **'Switch Account'**
  String get switch_account;

  /// No description provided for @run.
  ///
  /// In en, this message translates to:
  /// **'Run'**
  String get run;

  /// No description provided for @choose_login_method.
  ///
  /// In en, this message translates to:
  /// **'Choose Login Method'**
  String get choose_login_method;

  /// No description provided for @browser_login.
  ///
  /// In en, this message translates to:
  /// **'Login via Browser'**
  String get browser_login;

  /// No description provided for @manual_cookie.
  ///
  /// In en, this message translates to:
  /// **'Manual Cookie Input'**
  String get manual_cookie;

  /// No description provided for @joined.
  ///
  /// In en, this message translates to:
  /// **'Joined'**
  String get joined;

  /// No description provided for @im_logged_in.
  ///
  /// In en, this message translates to:
  /// **'I\'ve logged in'**
  String get im_logged_in;

  /// No description provided for @cancel.
  ///
  /// In en, this message translates to:
  /// **'Cancel'**
  String get cancel;

  /// No description provided for @ok.
  ///
  /// In en, this message translates to:
  /// **'OK'**
  String get ok;

  /// No description provided for @account_added_successfully.
  ///
  /// In en, this message translates to:
  /// **'Account added successfully!'**
  String get account_added_successfully;

  /// No description provided for @saving_account.
  ///
  /// In en, this message translates to:
  /// **'Saving account...'**
  String get saving_account;

  /// No description provided for @cookie.
  ///
  /// In en, this message translates to:
  /// **'Cookie'**
  String get cookie;

  /// No description provided for @no_cookie_found.
  ///
  /// In en, this message translates to:
  /// **'No cookie found'**
  String get no_cookie_found;

  /// No description provided for @no_auth_token_found.
  ///
  /// In en, this message translates to:
  /// **'No auth_token found'**
  String get no_auth_token_found;

  /// No description provided for @found_auth_token_last_check.
  ///
  /// In en, this message translates to:
  /// **'Auth Token found in last check'**
  String get found_auth_token_last_check;

  /// No description provided for @general.
  ///
  /// In en, this message translates to:
  /// **'General'**
  String get general;

  /// No description provided for @login_first.
  ///
  /// In en, this message translates to:
  /// **'Log in Needed'**
  String get login_first;

  /// No description provided for @login_first_description.
  ///
  /// In en, this message translates to:
  /// **'Add at least one account to continue'**
  String get login_first_description;

  /// No description provided for @log_in.
  ///
  /// In en, this message translates to:
  /// **'Log In'**
  String get log_in;

  /// No description provided for @delete.
  ///
  /// In en, this message translates to:
  /// **'Delete'**
  String get delete;

  /// No description provided for @confirm_delete_account.
  ///
  /// In en, this message translates to:
  /// **'Are you sure you want to delete account {accountId}? This action cannot be undone.'**
  String confirm_delete_account(Object accountId);
}

class _AppLocalizationsDelegate
    extends LocalizationsDelegate<AppLocalizations> {
  const _AppLocalizationsDelegate();

  @override
  Future<AppLocalizations> load(Locale locale) {
    return SynchronousFuture<AppLocalizations>(lookupAppLocalizations(locale));
  }

  @override
  bool isSupported(Locale locale) =>
      <String>['en', 'zh'].contains(locale.languageCode);

  @override
  bool shouldReload(_AppLocalizationsDelegate old) => false;
}

AppLocalizations lookupAppLocalizations(Locale locale) {
  // Lookup logic when language+country codes are specified.
  switch (locale.languageCode) {
    case 'zh':
      {
        switch (locale.countryCode) {
          case 'TW':
            return AppLocalizationsZhTw();
        }
        break;
      }
  }

  // Lookup logic when only language code is specified.
  switch (locale.languageCode) {
    case 'en':
      return AppLocalizationsEn();
    case 'zh':
      return AppLocalizationsZh();
  }

  throw FlutterError(
    'AppLocalizations.delegate failed to load unsupported locale "$locale". This is likely '
    'an issue with the localizations generation tool. Please file an issue '
    'on GitHub with a reproducible sample app and the gen-l10n configuration '
    'that was used.',
  );
}


### FILE: ./l10n/app_localizations_en.dart
// ignore: unused_import
import 'package:intl/intl.dart' as intl;
import 'app_localizations.dart';

// ignore_for_file: type=lint

/// The translations for English (`en`).
class AppLocalizationsEn extends AppLocalizations {
  AppLocalizationsEn([String locale = 'en']) : super(locale);

  @override
  String get language => 'Language';

  @override
  String get app_title => 'Autonitor';

  @override
  String get settings => 'Settings';

  @override
  String get home => 'Home';

  @override
  String get data => 'Data';

  @override
  String get accounts => 'Accounts';

  @override
  String get switchAccount => 'Switch Account';

  @override
  String get followers => 'Followers';

  @override
  String get following => 'Following';

  @override
  String get new_account => 'Add a new account';

  @override
  String get view_cookie => 'View Cookie';

  @override
  String get close => 'Close';

  @override
  String get view_on_twitter => 'View on Twitter';

  @override
  String get metadata => 'Metadata';

  @override
  String get tweets => 'Tweets';

  @override
  String get media_count => 'Media Count';

  @override
  String get likes => 'Likes';

  @override
  String get listed_count => 'Listed Count';

  @override
  String get identity => 'Identity-related';

  @override
  String get back => 'Back';

  @override
  String get history => 'History';

  @override
  String get suspended => 'Suspended';

  @override
  String get deactivated => 'Deactivated';

  @override
  String get normal_unfollowed => 'Normal Unfollowed';

  @override
  String get be_followed_back => 'Be Followed Back';

  @override
  String get mutual_unfollowed => 'Mutual Unfollowed';

  @override
  String get oneway_unfollowed => 'One-way Unfollowed';

  @override
  String get new_followers_following => 'New Followers & Following';

  @override
  String get empty_list_message => 'The list is empty';

  @override
  String get switch_account => 'Switch Account';

  @override
  String get run => 'Run';

  @override
  String get choose_login_method => 'Choose Login Method';

  @override
  String get browser_login => 'Login via Browser';

  @override
  String get manual_cookie => 'Manual Cookie Input';

  @override
  String get joined => 'Joined';

  @override
  String get im_logged_in => 'I\'ve logged in';

  @override
  String get cancel => 'Cancel';

  @override
  String get ok => 'OK';

  @override
  String get account_added_successfully => 'Account added successfully!';

  @override
  String get saving_account => 'Saving account...';

  @override
  String get cookie => 'Cookie';

  @override
  String get no_cookie_found => 'No cookie found';

  @override
  String get no_auth_token_found => 'No auth_token found';

  @override
  String get found_auth_token_last_check => 'Auth Token found in last check';

  @override
  String get general => 'General';

  @override
  String get login_first => 'Log in Needed';

  @override
  String get login_first_description => 'Add at least one account to continue';

  @override
  String get log_in => 'Log In';

  @override
  String get delete => 'Delete';

  @override
  String confirm_delete_account(Object accountId) {
    return 'Are you sure you want to delete account $accountId? This action cannot be undone.';
  }
}


### FILE: ./l10n/app_localizations_zh.dart
// ignore: unused_import
import 'package:intl/intl.dart' as intl;
import 'app_localizations.dart';

// ignore_for_file: type=lint

/// The translations for Chinese (`zh`).
class AppLocalizationsZh extends AppLocalizations {
  AppLocalizationsZh([String locale = 'zh']) : super(locale);

  @override
  String get language => '语言';

  @override
  String get app_title => 'Autonitor';

  @override
  String get settings => '设置';

  @override
  String get home => '首页';

  @override
  String get data => '数据';

  @override
  String get accounts => '账号';

  @override
  String get switchAccount => '切换账号';

  @override
  String get followers => '关注者';

  @override
  String get following => '正在关注';

  @override
  String get new_account => '添加新账号';

  @override
  String get view_cookie => '查看 Cookie';

  @override
  String get close => '关闭';

  @override
  String get view_on_twitter => '在 Twitter 上查看';

  @override
  String get metadata => '元数据';

  @override
  String get tweets => '推文';

  @override
  String get media_count => '媒体数量';

  @override
  String get likes => '点赞数量';

  @override
  String get listed_count => '被收录列表';

  @override
  String get identity => '身份相关';

  @override
  String get back => '返回';

  @override
  String get history => '历史';

  @override
  String get suspended => '被冻结';

  @override
  String get deactivated => '注销';

  @override
  String get normal_unfollowed => '普通取关';

  @override
  String get be_followed_back => '被回关';

  @override
  String get mutual_unfollowed => '互关双取';

  @override
  String get oneway_unfollowed => '互关单取';

  @override
  String get new_followers_following => '新增关注';

  @override
  String get empty_list_message => '列表为空';

  @override
  String get switch_account => '切换账号';

  @override
  String get run => '运行';

  @override
  String get choose_login_method => '选择登录方式';

  @override
  String get browser_login => '浏览器登录';

  @override
  String get manual_cookie => '输入Cookie';

  @override
  String get joined => '加入于';

  @override
  String get im_logged_in => '我已登录';

  @override
  String get cancel => '取消';

  @override
  String get ok => '确定';

  @override
  String get account_added_successfully => '账号添加成功！';

  @override
  String get saving_account => '正在保存账号...';

  @override
  String get cookie => 'Cookie';

  @override
  String get no_cookie_found => '未能找到 cookie';

  @override
  String get no_auth_token_found => '未能找到 auth_token';

  @override
  String get found_auth_token_last_check => '在上次检查中找到了 Auth Token';

  @override
  String get general => '通用';

  @override
  String get login_first => '需要登录';

  @override
  String get login_first_description => '请至少添加一个账号以继续';

  @override
  String get log_in => '登录';

  @override
  String get delete => '删除';

  @override
  String confirm_delete_account(Object accountId) {
    return '您确定要删除账号 $accountId 吗？此操作无法撤销。';
  }
}

/// The translations for Chinese, as used in Taiwan (`zh_TW`).
class AppLocalizationsZhTw extends AppLocalizationsZh {
  AppLocalizationsZhTw() : super('zh_TW');

  @override
  String get language => '語言';

  @override
  String get app_title => 'Autonitor';

  @override
  String get settings => '設定';

  @override
  String get home => '首頁';

  @override
  String get data => '數據';

  @override
  String get accounts => '賬戶';

  @override
  String get switchAccount => '切換賬戶';

  @override
  String get followers => '跟隨者';

  @override
  String get following => '跟隨中';

  @override
  String get new_account => '添加新賬戶';

  @override
  String get view_cookie => '查看 Cookie';

  @override
  String get close => '關閉';

  @override
  String get view_on_twitter => '在 Twitter 上查看';

  @override
  String get metadata => '元數據';

  @override
  String get tweets => '推文';

  @override
  String get media_count => '媒體數量';

  @override
  String get likes => '讚數';

  @override
  String get listed_count => '被收錄列表';

  @override
  String get identity => '身份相關';

  @override
  String get back => '返回';

  @override
  String get history => '歷史';

  @override
  String get suspended => '遭停權';

  @override
  String get deactivated => '註銷';

  @override
  String get normal_unfollowed => '普通取跟';

  @override
  String get be_followed_back => '被回跟';

  @override
  String get mutual_unfollowed => '互跟雙取';

  @override
  String get oneway_unfollowed => '互跟單取';

  @override
  String get new_followers_following => '新增跟隨';

  @override
  String get empty_list_message => '空列表';

  @override
  String get switch_account => '切換賬戶';

  @override
  String get run => '運行';

  @override
  String get choose_login_method => '選擇登入方式';

  @override
  String get browser_login => '透過瀏覽器登入';

  @override
  String get manual_cookie => '鍵入Cookie';

  @override
  String get joined => '加入於';

  @override
  String get im_logged_in => '我已登入';

  @override
  String get cancel => '取消';

  @override
  String get ok => '確定';

  @override
  String get account_added_successfully => '賬戶添加成功！';

  @override
  String get saving_account => '正在保存賬戶...';

  @override
  String get cookie => 'Cookie';

  @override
  String get no_cookie_found => '未能找到 cookie';

  @override
  String get no_auth_token_found => '未能找到 auth_token';

  @override
  String get found_auth_token_last_check => '在上次檢查中找到了 Auth Token';

  @override
  String get general => '通用';

  @override
  String get login_first => '需要登入';

  @override
  String get login_first_description => '請至少添加一個帳戶以繼續';

  @override
  String get log_in => '登入';

  @override
  String get delete => '刪除';

  @override
  String confirm_delete_account(Object accountId) {
    return '您確定要刪除賬戶 $accountId 嗎？此操作無法撤銷。';
  }
}


### FILE: ./l10n/app_zh.arb
{
  "@@locale": "zh",
  "language": "语言",
  "@language": {
    "description": "语言设置的标签"
  },
  "app_title": "Autonitor",
  "settings": "设置",
  "home": "首页",
  "data": "数据",
  "accounts": "账号",
  "switchAccount": "切换账号",
  "followers": "关注者",
  "following": "正在关注",
  "new_account": "添加新账号",
  "view_cookie": "查看 Cookie",
  "close": "关闭",
  "view_on_twitter": "在 Twitter 上查看",
  "metadata": "元数据",
  "tweets": "推文",
  "media_count": "媒体数量",
  "likes": "点赞数量",
  "listed_count": "被收录列表",
  "identity": "身份相关",
  "back": "返回",
  "history": "历史",
  "suspended": "被冻结",
  "deactivated": "注销",
  "normal_unfollowed": "普通取关",
  "be_followed_back": "被回关",
  "mutual_unfollowed": "互关双取",
  "oneway_unfollowed": "互关单取",
  "new_followers_following": "新增关注",
  "empty_list_message": "列表为空",
  "switch_account": "切换账号",
  "run": "运行",
  "choose_login_method": "选择登录方式",
  "browser_login": "浏览器登录",
  "manual_cookie": "输入Cookie",
  "joined": "加入于",
  "im_logged_in": "我已登录",
  "cancel": "取消",
  "ok": "确定",
  "account_added_successfully": "账号添加成功！",
  "saving_account": "正在保存账号...",
  "cookie": "Cookie",
  "no_cookie_found": "未能找到 cookie",
  "no_auth_token_found": "未能找到 auth_token",
  "found_auth_token_last_check": "在上次检查中找到了 Auth Token",
  "general": "通用",
  "login_first": "需要登录",
  "login_first_description": "请至少添加一个账号以继续",
  "log_in": "登录",
  "delete": "删除",
  "confirm_delete_account": "您确定要删除账号 {accountId} 吗？此操作无法撤销。",
    "@confirm_delete_account": {
    "placeholders": {
      "accountId": {
        "description": "The ID of the account to be deleted"
      }
    }
  }
}

### FILE: ./l10n/app_zh_TW.arb
{
  "@@locale": "zh_TW",
  "language": "語言", 
  "@language": {
    "description": "語言設定的標籤"
  },
  "app_title": "Autonitor",
  "settings": "設定",
  "home": "首頁",
  "data": "數據",
  "accounts": "賬戶",
  "switchAccount": "切換賬戶",
  "followers": "跟隨者",
  "following": "跟隨中",
  "new_account": "添加新賬戶",
  "view_cookie": "查看 Cookie",
  "close": "關閉",
  "view_on_twitter": "在 Twitter 上查看",
  "metadata": "元數據",
  "tweets": "推文",
  "media_count": "媒體數量",
  "likes": "讚數",
  "listed_count": "被收錄列表",
  "identity": "身份相關",
  "back": "返回",
  "history": "歷史",
  "suspended": "遭停權",
  "deactivated": "註銷",
  "normal_unfollowed": "普通取跟",
  "be_followed_back": "被回跟",
  "mutual_unfollowed": "互跟雙取",
  "oneway_unfollowed": "互跟單取",
  "new_followers_following": "新增跟隨",
  "empty_list_message": "空列表",
  "switch_account": "切換賬戶",
  "run": "運行",
  "choose_login_method": "選擇登入方式",
  "browser_login": "透過瀏覽器登入",
  "manual_cookie": "鍵入Cookie",
  "joined": "加入於",
  "im_logged_in": "我已登入",
  "cancel": "取消",
  "ok": "確定",
  "account_added_successfully": "賬戶添加成功！",
  "saving_account": "正在保存賬戶...",
  "cookie": "Cookie",
  "no_cookie_found": "未能找到 cookie",
  "no_auth_token_found": "未能找到 auth_token",
  "found_auth_token_last_check": "在上次檢查中找到了 Auth Token",
  "general": "通用",
  "login_first": "需要登入",
  "login_first_description": "請至少添加一個帳戶以繼續",
  "log_in": "登入",
  "delete": "刪除",
  "confirm_delete_account": "您確定要刪除賬戶 {accountId} 嗎？此操作無法撤銷。",
  "@confirm_delete_account": {
    "placeholders": {
      "accountId": {
        "description": "The ID of the account to be deleted"
      }
    }
  }
}

### FILE: ./main.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart'; // 1. 导入 riverpod
import 'package:autonitor/ui/main_scaffold.dart';
// --- 添加导入 ---
import 'package:flutter_localizations/flutter_localizations.dart';
import 'l10n/app_localizations.dart';
import 'providers/settings_provider.dart'; // 2. 导入 settings provider

void main() {
  runApp(
    const ProviderScope(
      child: MyApp(),
    ),
  );
}

// 3. 改为 ConsumerWidget
class MyApp extends ConsumerWidget {
  const MyApp({super.key});

  @override
  // 4. 添加 WidgetRef ref
  Widget build(BuildContext context, WidgetRef ref) {
    // 5. 监听设置
    final settingsValue = ref.watch(settingsProvider);

    return MaterialApp(
      // --- 添加 onGenerateTitle ---
      onGenerateTitle: (context) {
        // 确保 AppLocalizations 在这里可用
        // 这对于在应用切换器中显示正确的应用名称很重要
        // 你需要在 .arb 文件中定义 "app_title"
        return AppLocalizations.of(context)?.app_title ?? 'Autonitor';
      },
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
        useMaterial3: true,
      ),
      darkTheme: ThemeData(
        brightness: Brightness.dark,
        colorScheme: ColorScheme.fromSeed(
          seedColor: Colors.blue,
          brightness: Brightness.dark,
        ),
        useMaterial3: true,
      ),
      themeMode: ThemeMode.system,
      home: const MainScaffold(),

      // --- 本地化配置 ---
      localizationsDelegates: const [
        AppLocalizations.delegate, // 你生成的 AppLocalizations 代理
        GlobalMaterialLocalizations.delegate, // Material 组件的默认本地化
        GlobalWidgetsLocalizations.delegate, // Widget 的默认本地化 (如文本方向)
        GlobalCupertinoLocalizations.delegate, // Cupertino 组件的本地化 (如果用到)
      ],
      // 6. 更新 supportedLocales
      supportedLocales: const [
        Locale('en'),       // 英语
        Locale('zh', 'CN'), // 简体中文
        Locale('zh', 'TW'), // 繁體中文
        Locale('zh'),       // 基础中文 (作为 fallback)
      ],

      // 7. 设置 locale 属性
      locale: settingsValue.when(
        loading: () => null, // 加载中，使用系统默认
        error: (e, s) => null, // 出错，使用系统默认
        data: (settings) => settings.locale, // 使用 Provider 中的 Locale (null 表示 Auto/系统默认)
      ),
      // --- 配置结束 ---
    );
  }
}



### FILE: ./models/account.dart
    class Account {
      /// The unique Twitter User ID (Rest ID / twid).
      final String id;
      /// The full cookie string required for authentication.
      final String cookie;
      /// The user's display name (e.g., "Elon Musk"). Fetched from API.
      final String? name;
      /// The user's screen name / handle (e.g., "elonmusk"). Fetched from API.
      final String? screenName;
      /// The URL for the user's profile image. Fetched from API.
      final String? avatarUrl;
    
      Account({
        required this.id,
        required this.cookie,
        this.name,
        this.screenName,
        this.avatarUrl,
      });
    
      /// Creates an Account instance from a JSON map.
      factory Account.fromJson(Map<String, dynamic> json) {
        return Account(
          id: json['id'] as String? ?? '', // Provide default empty string
          cookie: json['cookie'] as String? ?? '', // Provide default empty string
          name: json['name'] as String?,
          screenName: json['screenName'] as String?,
          avatarUrl: json['avatarUrl'] as String?,
        );
      }
    
      /// Converts the Account instance to a JSON map.
      Map<String, dynamic> toJson() {
        return {
          'id': id,
          'cookie': cookie,
          'name': name,
          'screenName': screenName,
          'avatarUrl': avatarUrl,
        };
      }
    
      // Optional: Add copyWith for easier updates
      Account copyWith({
        String? id,
        String? cookie,
        String? name,
        String? screenName,
        String? avatarUrl,
      }) {
        return Account(
          id: id ?? this.id,
          cookie: cookie ?? this.cookie,
          name: name ?? this.name,
          screenName: screenName ?? this.screenName,
          avatarUrl: avatarUrl ?? this.avatarUrl,
        );
      }
    
      // Optional: Override toString for better debugging
      @override
      String toString() {
        return 'Account(id: $id, name: $name, screenName: $screenName, avatarUrl: $avatarUrl, cookie: ${cookie.length > 10 ? cookie.substring(0, 10) + '...' : cookie})';
      }
    }

### FILE: ./models/app_settings.dart
import 'package:flutter/material.dart';

class AppSettings {
  /// 选择的语言 ('Auto', '简体中文', 'English' 等)。
  final Locale? locale;
  // 未来可以添加其他设置字段，例如：
  // final bool isDarkMode;

  /// 构造函数，默认语言为 'Auto'。
  AppSettings({
    this.locale,
    // 在这里初始化其他默认设置
    // this.isDarkMode = false,
  });

  /// 创建一个包含更新值的新实例。
  AppSettings copyWith({Locale? locale}) {
    return AppSettings(locale: locale);
  }

  /// 将设置对象转换为 JSON Map 以便存储。
  Map<String, dynamic> toJson() => {
    'languageCode': locale?.languageCode,
    'countryCode': locale?.countryCode,
  };

  /// 从 JSON Map 创建设置对象。
  factory AppSettings.fromJson(Map<String, dynamic> json) {
    final languageCode = json['languageCode'] as String?;
    final countryCode = json['countryCode'] as String?;
    return AppSettings(
      locale: languageCode != null ? Locale(languageCode, countryCode) : null,
    );
  }
}


### FILE: ./models/cache_data.dart
// [已更新]
// 核心改动：
// 1. 新增了 `toJson` 方法，用于将 CacheData 对象实例序列化为 Map<String, dynamic>。
// 2. 这是解决 `The method 'toJson' isn't defined` 编译错误所必需的。

class CacheData {
  final String accountId;
  final String accountName;
  final String lastUpdateTime;
  final int followersCount;
  final int followingCount;
  final int unfollowedCount;
  final int mutualUnfollowedCount;
  final int singleUnfollowedCount;
  final int frozenCount;
  final int deactivatedCount;
  final int refollowedCount;
  final int newFollowersCount;

  CacheData({
    required this.accountId,
    required this.accountName,
    required this.lastUpdateTime,
    required this.followersCount,
    required this.followingCount,
    required this.unfollowedCount,
    required this.mutualUnfollowedCount,
    required this.singleUnfollowedCount,
    required this.frozenCount,
    required this.deactivatedCount,
    required this.refollowedCount,
    required this.newFollowersCount,
  });

  factory CacheData.fromJson(Map<String, dynamic> json) {
    return CacheData(
      accountId: json['accountId'] ?? '',
      accountName: json['accountName'] ?? 'Unknown',
      lastUpdateTime: json['lastUpdateTime'] ?? '',
      followersCount: json['followersCount'] ?? 0,
      followingCount: json['followingCount'] ?? 0,
      unfollowedCount: json['unfollowedCount'] ?? 0,
      mutualUnfollowedCount: json['mutualUnfollowedCount'] ?? 0,
      singleUnfollowedCount: json['singleUnfollowedCount'] ?? 0,
      frozenCount: json['frozenCount'] ?? 0,
      deactivatedCount: json['deactivatedCount'] ?? 0,
      refollowedCount: json['refollowedCount'] ?? 0,
      newFollowersCount: json['newFollowersCount'] ?? 0,
    );
  }

  /// [新增] 将 CacheData 实例转换为 Map 的方法
  Map<String, dynamic> toJson() {
    return {
      'accountId': accountId,
      'accountName': accountName,
      'lastUpdateTime': lastUpdateTime,
      'followersCount': followersCount,
      'followingCount': followingCount,
      'unfollowedCount': unfollowedCount,
      'mutualUnfollowedCount': mutualUnfollowedCount,
      'singleUnfollowedCount': singleUnfollowedCount,
      'frozenCount': frozenCount,
      'deactivatedCount': deactivatedCount,
      'refollowedCount': refollowedCount,
      'newFollowersCount': newFollowersCount,
    };
  }
}



### FILE: ./models/twitter_user.dart
// [已更新]
// 核心改动：
// 1. 添加了 `fromJson` 工厂构造函数，让这个类可以从一个Map(JSON)对象创建实例。
// 2. 添加了 `toJson` 方法，让这个类的实例可以被转换成一个Map(JSON)对象。
// 3. 这使得TwitterUser对象可以在应用中被序列化和反序列化，是数据持久化的基础。
class TwitterUser {
  final String avatarUrl;
  final String name;
  final String id;
  final String restId;
  final String joinTime;
  final String? bio;
  final String? location;
  final String? bannerUrl;
  final String? link;
  final int followingCount;
  final int followersCount;

  const TwitterUser({
    required this.avatarUrl,
    required this.name,
    required this.id,
    required this.restId,
    required this.joinTime,
    required this.bio,
    required this.location,
    required this.bannerUrl,
    required this.link,
    required this.followersCount,
    required this.followingCount,
  });

  // 从Map(JSON)创建TwitterUser实例
  factory TwitterUser.fromJson(Map<String, dynamic> json) {
    return TwitterUser(
      avatarUrl: json['avatarUrl'] ?? '',
      name: json['name'] ?? 'Unknown Name',
      id: json['id'] ?? 'Unknown ID',
      restId: json['restId'] ?? '',
      bio: json['bio'],
      location: json['location'],
      joinTime: json['joinTime'],
      bannerUrl: json['bannerUrl'],
      link: json['link'],
      followersCount: json['followersCount'] ?? 0,
      followingCount: json['followingCount'] ?? 0,
    );
  }

  // 将TwitterUser实例转换为Map(JSON)
  Map<String, dynamic> toJson() {
    return {
      'avatarUrl': avatarUrl,
      'name': name,
      'id': id,
      'restId': restId,
      'bio': bio,
      'location': location,
      'joinTime': joinTime,
      'bannerUrl': bannerUrl,
    };
  }
}



### FILE: ./providers/auth_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../models/account.dart';
import '../services/secure_storage_service.dart';
import '../services/twitter_api_service.dart';
// 移除了未使用的 dart:convert 导入

// --- Provider 定义 ---

// accountsProvider 保持不变
final accountsProvider = StateNotifierProvider<AccountsNotifier, List<Account>>(
  (ref) {
    return AccountsNotifier(ref);
  },
);

// --- ActiveAccountNotifier ---
class ActiveAccountNotifier extends StateNotifier<Account?> {
  final Ref _ref;
  late final SecureStorageService _storageService;

  ActiveAccountNotifier(this._ref) : super(null) {
    _storageService = _ref.read(secureStorageServiceProvider);
    _initializeActiveAccount();
  }

  Future<void> _initializeActiveAccount() async {
    final activeId = await _storageService.readActiveAccountId();
    final accounts = _ref.read(accountsProvider);
    print(
      "ActiveAccountNotifier: Initializing... Loaded active ID: $activeId. Current accounts: ${accounts.length}",
    );
    if (activeId != null && accounts.isNotEmpty) {
      try {
        final initialAccount = accounts.firstWhere((acc) => acc.id == activeId);
        state = initialAccount;
        print(
          "ActiveAccountNotifier: Initial active account set to ID ${state?.id}.",
        );
      } catch (e) {
        print(
          "ActiveAccountNotifier: Stored active ID $activeId not found in accounts list. Resetting.",
        );
        // 使用假设的正确方法名
        await _storageService.deleteActiveAccountId();
        if (accounts.isNotEmpty) {
          state = accounts.first;
          // 使用假设的正确方法名
          await _storageService.saveActiveAccountId(state!.id);
          print(
            "ActiveAccountNotifier: Reset active account to first account ID ${state?.id}.",
          );
        } else {
          state = null;
          print("ActiveAccountNotifier: No accounts available after reset.");
        }
      }
    } else if (accounts.isNotEmpty) {
      state = accounts.first;
      // 使用假设的正确方法名
      await _storageService.saveActiveAccountId(state!.id);
      print(
        "ActiveAccountNotifier: No active ID stored, setting first account ID ${state?.id} as active.",
      );
    } else {
      state = null;
      print(
        "ActiveAccountNotifier: No accounts available, active account remains null.",
      );
    }
  }

  Future<void> setActive(Account? account) async {
    state = account;
    if (account != null) {
      // 使用假设的正确方法名
      await _storageService.saveActiveAccountId(account.id);
      print(
        "ActiveAccountNotifier: Set active account ID: ${account.id} and persisted.",
      );
    } else {
      // 使用假设的正确方法名
      await _storageService.deleteActiveAccountId();
      print("ActiveAccountNotifier: Cleared active account ID and persisted.");
    }
  }

  Future<void> updateFromList(List<Account> newList) async {
    print(
      "ActiveAccountNotifier: Account list updated. Current active ID: ${state?.id}. New list size: ${newList.length}",
    );
    if (state == null) {
      if (newList.isNotEmpty) {
        await setActive(newList.first);
        print(
          "ActiveAccountNotifier: No previous active account, set first of new list (${state?.id}) as active.",
        );
      } else {
        print(
          "ActiveAccountNotifier: No previous active account and new list is empty.",
        );
      }
    } else {
      final bool stillExists = newList.any((acc) => acc.id == state!.id);
      if (!stillExists) {
        print(
          "ActiveAccountNotifier: Active account ID ${state!.id} no longer exists in the updated list.",
        );
        await setActive(newList.isNotEmpty ? newList.first : null);
        print(
          "ActiveAccountNotifier: Reset active account to ${state?.id ?? 'null'}.",
        );
      } else {
        print(
          "ActiveAccountNotifier: Active account ID ${state!.id} still exists. No change needed.",
        );
        final updatedAccountInstance = newList.firstWhere(
          (acc) => acc.id == state!.id,
        );
        if (state != updatedAccountInstance) {
          state = updatedAccountInstance;
          print(
            "ActiveAccountNotifier: Updated active account instance for ID ${state!.id}.",
          );
        }
      }
    }
  }
}

// activeAccountProvider 保持不变
final activeAccountProvider =
    StateNotifierProvider<ActiveAccountNotifier, Account?>((ref) {
      final notifier = ActiveAccountNotifier(ref);
      ref.listen(accountsProvider, (previousList, newList) {
        notifier.updateFromList(newList);
      });
      return notifier;
    });

// --- AccountsNotifier ---

class AccountsNotifier extends StateNotifier<List<Account>> {
  final Ref _ref;
  late final SecureStorageService _storageService;
  late final TwitterApiService _apiService;

  AccountsNotifier(this._ref) : super([]) {
    _storageService = _ref.read(secureStorageServiceProvider);
    _apiService = _ref.read(twitterApiServiceProvider);
    loadAccounts();
  }

  Future<void> loadAccounts() async {
    state = await _storageService.getAccounts(); // Assuming getAccounts exists
    print("AccountsNotifier: Loaded ${state.length} accounts.");
    // Notify ActiveAccountNotifier after loading
    _ref.read(activeAccountProvider.notifier).updateFromList(state);
  }

  Future<void> addAccount(String cookie) async {
    final twid = _parseTwidFromCookie(cookie);
    if (twid == null) {
      throw Exception('无法从Cookie中解析出twid');
    }

    String? name;
    String? screenName;
    String? avatarUrl;

    try {
      final Map<String, dynamic> userProfileJson = await _apiService
          .getUserByRestId(twid, cookie);

      final result = userProfileJson['data']?['user']?['result'];

      if (result != null &&
          result is Map<String, dynamic> &&
          result['__typename'] == 'User') {
        final core = result['core'];
        if (core != null && core is Map<String, dynamic>) {
          name = core['name'] as String?;
          screenName = core['screen_name'] as String?;
          avatarUrl = (result['avatar']['image_url'] as String?)?.replaceFirst('_normal', '_400x400');
          print(
            "addAccount: Profile fetched - Name: $name, ScreenName: $screenName, Avatar: $avatarUrl",
          );
        } else {
          print("addAccount: API 返回成功，但 core 数据缺失或格式不正确。");
        }
      } else {
        final typeName = result?['__typename'];
        final reason = result?['reason'];
        print(
          "addAccount: API 返回成功，但用户结果类型不是 'User' (可能是 '$typeName', 原因: '$reason')。",
        );
        throw Exception("无法获取有效的用户信息 (可能不存在或被限制)。");
      }
    } catch (e) {
      print("addAccount: 调用 API 或解析 Profile 时出错: $e");
      rethrow;
    }

    // --- 使用正确的命名参数调用 Account 构造函数 ---
    final newAccount = Account(
      id: twid,
      cookie: cookie,
      name: name, // 确保 Account 构造函数有 'name'
      screenName: screenName, // 确保 Account 构造函数有 'screenName'
      avatarUrl: avatarUrl, // 确保 Account 构造函数有 'avatarUrl'
    );

    // --- 将这部分代码移回方法内部 ---
    final exists = state.any((acc) => acc.id == newAccount.id);
    List<Account> newList;
    if (exists) {
      newList = [
        for (final acc in state)
          if (acc.id == newAccount.id) newAccount else acc,
      ];
      print("addAccount: Updated existing account for ID: $twid");
    } else {
      newList = [...state, newAccount];
      print("addAccount: Added new account for ID: $twid");
    }
    state = newList;

    // Assuming saveAccounts exists and uses the correct state
    await _storageService.saveAccounts(state);
    print("addAccount: Saved accounts list to secure storage.");

    await _ref.read(activeAccountProvider.notifier).setActive(newAccount);
    print("addAccount: Set account ID $twid as active.");
    // --- 移动的代码块结束 ---
  } // <--- addAccount 方法结束

  Future<void> removeAccount(String id) async {
    final newList = state.where((acc) => acc.id != id).toList();
    state = newList;
    // Assuming saveAccounts exists
    await _storageService.saveAccounts(state);
    print("AccountsNotifier: Removed account ID $id and saved.");
  }

  String? _parseTwidFromCookie(String cookie) {
    try {
      final parts = cookie.split(';');
      final twidPart = parts.firstWhere(
        (part) => part.trim().startsWith('twid='),
        orElse: () => '',
      );
      if (twidPart.isNotEmpty) {
      var valuePart = twidPart.split('=')[1].trim();

      // URL 解码
      valuePart = Uri.decodeComponent(valuePart);

      // 兼容 u=xxxx 或 u_xxxx
      if (valuePart.startsWith('u=')) {
        final id = valuePart.substring(2);
        return id.isNotEmpty ? id : null;
      } else if (valuePart.startsWith('u_')) {
        final id = valuePart.substring(2);
        return id.isNotEmpty ? id : null;
      } else {
        print("解析 twid 失败: twid value ($valuePart) 不以 'u=' 或 'u_' 开头");
        return null;
      }
    }
    return null;
  } catch (e) {
      print("Error parsing twid from cookie: $e");
      return null;
    }
  }
}


### FILE: ./providers/settings_provider.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart'; // 导入 Riverpod
import '../models/app_settings.dart'; // 导入模型
import '../services/settings_service.dart'; // 导入服务

// 提供 SettingsService 实例的 Provider
final settingsServiceProvider = Provider((ref) => SettingsService());

// 用于管理 AppSettings 状态并通知变化的 StateNotifierProvider
final settingsProvider =
    StateNotifierProvider<SettingsNotifier, AsyncValue<AppSettings>>((ref) {
  // 依赖 settingsServiceProvider 来获取服务实例
  final service = ref.watch(settingsServiceProvider);
  // 创建 SettingsNotifier 并传入服务
  return SettingsNotifier(service);
});

// StateNotifier 类，包含加载和更新设置的逻辑
class SettingsNotifier extends StateNotifier<AsyncValue<AppSettings>> {
  final SettingsService _settingsService;

  // 构造函数，初始化状态为加载中，并立即开始加载设置
  SettingsNotifier(this._settingsService) : super(const AsyncValue.loading()) {
    _load(); 
  }

  /// 异步加载设置并更新状态
  Future<void> _load() async {
    state = const AsyncValue.loading(); // 设置为加载中状态
    try {
      final settings = await _settingsService.loadSettings(); // 调用服务加载
      state = AsyncValue.data(settings); // 加载成功，更新状态为数据
    } catch (e, s) {
      state = AsyncValue.error(e, s); // 加载失败，更新状态为错误
      print('加载设置失败: $e');
    }
  }

  /// 更新应用语言设置
  Future<void> updateLocale(Locale? newLocale) async {
    // 获取当前状态的数据，如果状态是加载中或错误，则使用默认设置
    final currentSettings = state.value ?? AppSettings(); 

    // 使用 copyWith 创建包含新语言的设置对象
    final newState = currentSettings.copyWith(locale: newLocale);

    // 立即乐观地更新 UI 状态为新数据
    state = AsyncValue.data(newState);

    // 调用服务将新状态持久化保存
    try {
      await _settingsService.saveSettings(newState);
    } catch (e, s) {
      // 如果保存失败，将状态设置为错误，并打印日志
      state = AsyncValue.error('保存语言设置失败: $e', s);
      // （可选）可以考虑重新加载之前的状态：await _load();
      print('保存语言设置失败: $e');
    }
  }

  // 未来可以在这里添加更新其他设置的方法
  // Future<void> updateDarkMode(bool isDark) async { ... }
}

### FILE: ./services/secure_storage_service.dart
import 'dart:convert';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import '../models/account.dart';

final secureStorageServiceProvider = Provider((ref) => SecureStorageService());

class SecureStorageService {
  final _storage = const FlutterSecureStorage();
  
  static const _accountsKey = 'accounts_list';
  static const _activeAccountIdKey = 'active_account_id';

  Future<List<Account>> getAccounts() async {
    try {
      final jsonString = await _storage.read(key: _accountsKey);
      if (jsonString == null) {
        return [];
      }
      final List<dynamic> jsonList = jsonDecode(jsonString);
      return jsonList.map((json) => Account.fromJson(json)).toList();
    } catch (e) {
      return [];
    }
  }
  
  Future<void> saveAccounts(List<Account> accounts) async {
    try {
      final List<Map<String, dynamic>> jsonList =
          accounts.map((account) => account.toJson()).toList();
      final jsonString = jsonEncode(jsonList);
      await _storage.write(key: _accountsKey, value: jsonString);
    } catch (e) {
      // handle error
    }
  }
  Future<String?> readActiveAccountId() async {
    try {
      return await _storage.read(key: _activeAccountIdKey);
    } catch (e) {
      print("Error reading active account ID: $e");
      return null;
    }
  }
  Future<void> saveActiveAccountId(String id) async {
    try {
      await _storage.write(key: _activeAccountIdKey, value: id);
    } catch (e) {
      print("Error saving active account ID: $e");
    }
  }
  Future<void> deleteActiveAccountId() async {
    try {
      await _storage.delete(key: _activeAccountIdKey);
    } catch (e) {
      print("Error deleting active account ID: $e");
    }
  }
}



### FILE: ./services/settings_service.dart
import 'dart:convert'; // 用于 JSON 编解码
import 'package:shared_preferences/shared_preferences.dart'; // 导入插件
import '../models/app_settings.dart'; // 导入设置模型

/// 用于加载和保存应用设置的服务类。
class SettingsService {
  // 用于在 shared_preferences 中存储设置的键
  static const _settingsKey = 'app_settings_v1'; 

  /// 从 shared preferences 加载设置。
  /// 如果找不到或发生错误，则返回默认设置。
  Future<AppSettings> loadSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final jsonString = prefs.getString(_settingsKey);
      if (jsonString != null) {
        // 如果找到了 JSON 字符串，解码并用 fromJson 创建 AppSettings 对象
        final jsonMap = jsonDecode(jsonString) as Map<String, dynamic>;
        return AppSettings.fromJson(jsonMap);
      }
    } catch (e) {
      // 记录错误或处理损坏的数据
      print('加载设置时出错: $e');
    }
    // 如果加载失败或不存在设置，则返回默认设置
    return AppSettings();
  }

  /// 将给定的设置保存到 shared preferences。
  Future<void> saveSettings(AppSettings settings) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      // 将 AppSettings 对象用 toJson 转换为 JSON Map，然后编码为字符串
      final jsonString = jsonEncode(settings.toJson());
      // 将 JSON 字符串保存到 shared preferences
      await prefs.setString(_settingsKey, jsonString);
    } catch (e) {
      // 记录错误或处理保存失败
      print('保存设置时出错: $e');
    }
  }
}

### FILE: ./services/twitter_api_service.dart
import 'dart:convert';
import 'package:dio/dio.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

final twitterApiServiceProvider = Provider((ref) => TwitterApiService());

class TwitterApiService {
  final Dio _dio;

  TwitterApiService() : _dio = Dio() {
    // 在这里可以为 Dio 设置一些基础配置，比如超时时间
    //_dio.options.connectTimeout = const Duration(seconds: 10);
    //_dio.options.receiveTimeout = const Duration(seconds: 10);
  }

  /// 从 Cookie 字符串中解析 'ct0' CSRF token。
  String? _parseCsrfToken(String cookie) {
    try {
      final parts = cookie.split(';');
      final csrfPart = parts.firstWhere(
        (part) => part.trim().startsWith('ct0='),
        orElse: () => '',
      );
      if (csrfPart.isNotEmpty) {
        final token = csrfPart.split('=')[1].trim();
        return token.isNotEmpty ? token : null;
      }
    } catch (e) {
      print("解析 ct0 token 失败: $e");
    }
    return null;
  }

  /// 通过 Rest ID (twid) 获取用户 Profile 信息
  ///
  /// 成功时返回解码后的 JSON Map，失败时抛出异常。
  Future<Map<String, dynamic>> getUserByRestId(
    String userId,
    String cookie,
  ) async {
    final csrfToken = _parseCsrfToken(cookie);
    if (csrfToken == null) {
      throw Exception("无法从 Cookie 中解析出 x-csrf-token (ct0)");
    }

    // 1. 准备 Query Parameters
    final variables = {
      "userId": userId,
      // "withSafetyModeUserFields": true // 可以根据需要添加
    };

    final features = {
      "hidden_profile_subscriptions_enabled": true,
      "responsive_web_graphql_exclude_directive_enabled": true,
      "verified_phone_label_enabled": false,
      "highlights_tweets_tab_ui_enabled": true,
      "creator_subscriptions_tweet_preview_api_enabled": true,
      "responsive_web_graphql_skip_user_profile_image_extensions_enabled":
          false,
      "responsive_web_graphql_timeline_navigation_enabled": true,
      "rweb_tipjar_consumption_enabled": false,
      "subscriptions_feature_can_gift_premium": false,
      "payments_enabled": false,
      "responsive_web_twitter_article_notes_tab_enabled": false,
      "profile_label_improvements_pcf_label_in_post_enabled": false,
      "responsive_web_profile_redirect_enabled": false,
      // ... 可以从您提供的 URL 中复制更多 feature flags
    };

    final queryParameters = {
      'variables': jsonEncode(variables),
      'features': jsonEncode(features),
    };

    // 2. 准备 Headers
    final headers = {
      'authorization':
          'Bearer AAAAAAAAAAAAAAAAAAAAANRILgAAAAAAnNwIzUejRCOuH5E6I8xnZz4puTs%3D1Zv7ttfk8LF81IUq16cHjhLTvJu4FA33AGWWjCpTnA',
      'x-csrf-token': csrfToken,
      'Cookie': cookie,
      // --- 从您命令中复制的其他 Headers ---
      'x-twitter-active-user': 'yes',
      'x-twitter-auth-type': 'OAuth2Session',
      'x-twitter-client-language': 'en',
      // --- 推荐添加的浏览器 Headers ---
      'User-Agent':
          'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
      'Referer': 'https://x.com/',
    };

    // 3. 定义 URL
    const String url =
        'https://x.com/i/api/graphql/q9yeu7UlEs2YVx_-Z8Ps7Q/UserByRestId';

    try {
      // 4. 发送 GET 请求
      final response = await _dio.get(
        url,
        queryParameters: queryParameters,
        options: Options(headers: headers),
      );

      // 5. 检查响应并返回数据
      if (response.statusCode == 200 && response.data != null) {
        print(response.data);
        return response.data as Map<String, dynamic>;
      } else {
        throw Exception('获取用户信息失败: Status ${response.statusCode}');
      }
    } on DioException catch (e) {
      print("Dio Error on getUserByRestId: ${e.response?.data}");
      throw Exception('网络请求失败: ${e.message}');
    } catch (e) {
      // 捕获其他未知错误
      print("Unknown error on getUserByRestId: $e");
      throw Exception('发生未知错误');
    }
  }
}


### FILE: ./ui/accounts_page.dart
import 'package:autonitor/ui/auth/webview_login_page.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../providers/auth_provider.dart';
import '../l10n/app_localizations.dart';
import '../models/account.dart';

// [已更新]
// 核心改动：
// 1. 移除了 AppBar。
// 2. 在列表顶部新增了一个带"+"图标的“添加新账号”按钮。
// 3. 将登录流程（浏览器/手动）的触发逻辑直接整合到了这个页面中。
// 4. 增加了 `_isLoading` 状态，用于在保存账号时显示全屏加载动画。

class AccountsPage extends ConsumerStatefulWidget {
  const AccountsPage({super.key});

  @override
  ConsumerState<AccountsPage> createState() => _AccountsPageState();
}

class _AccountsPageState extends ConsumerState<AccountsPage> {
  bool _isLoading = false;

  Future<void> _navigateAndAddAccount(BuildContext context) async {
    final source = await _showLoginOptions(context);
    if (source == null) return;

    String? cookie;
    if (source == 'browser') {
      cookie = await Navigator.push<String>(
        context,
        MaterialPageRoute(builder: (_) => const WebViewLoginPage()),
      );
    } else if (source == 'manual') {
      cookie = await _showManualInputDialog(context);
    }

    if (cookie != null && cookie.isNotEmpty) {
      await _handleLogin(cookie);
    }
  }

  Future<void> _confirmAndDelete(Account account) async {
    final l10n = AppLocalizations.of(context)!;

    // 弹出确认对话框
    final bool? confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        // --- 恢复：使用您提供的 l10n key ---
        title: Text(l10n.delete),
        // --- 恢复：使用您提供的 l10n key ---
        content: Text(l10n.confirm_delete_account(account.id)),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: Text(l10n.cancel), // 使用 "取消"
          ),
          // 为破坏性操作使用红色按钮
          FilledButton(
            style: FilledButton.styleFrom(
              backgroundColor: Theme.of(context).colorScheme.error,
            ),
            onPressed: () => Navigator.pop(context, true),
            // --- 恢复：使用您提供的 l10n key ---
            child: Text(l10n.delete),
          ),
        ],
      ),
    );

    // 如果用户确认了，则调用 provider
    if (confirmed == true && context.mounted) {
      ref.read(accountsProvider.notifier).removeAccount(account.id);
    }
  }
  // --- ↑↑↑ 新方法添加完毕 ↑↑↑ ---

  Future<String?> _showLoginOptions(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    return showDialog<String>(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(l10n.choose_login_method),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, 'manual'),
            child: Text(l10n.manual_cookie),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(context, 'browser'),
            child: Text(l10n.browser_login),
          ),
        ],
      ),
    );
  }

  Future<String?> _showManualInputDialog(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    final controller = TextEditingController();
    return showDialog<String>(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(l10n.manual_cookie),
        content: TextField(controller: controller, maxLines: 5),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(l10n.cancel),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(context, controller.text),
            child: Text(l10n.ok),
          ),
        ],
      ),
    );
  }

  Future<void> _handleLogin(String cookie) async {
    final l10n = AppLocalizations.of(context)!;
    // --- 1. 在 try 之前获取 theme ---
    final theme = Theme.of(context);

    setState(() => _isLoading = true);

    try {
      await ref.read(accountsProvider.notifier).addAccount(cookie);
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            // --- 2. 修改成功 SnackBar ---
            content: Text(
              l10n.account_added_successfully,
              // 使用 'onPrimaryContainer' 颜色，它保证在 'primaryContainer' 上清晰可见
              style: TextStyle(color: theme.colorScheme.onPrimaryContainer),
            ),
            // 使用 'primaryContainer' 作为背景色
            // 它在亮色模式下是浅色，在暗色模式下是深色
            backgroundColor: theme.colorScheme.primaryContainer,
          ),
        );
      }
    } catch (e, s) {
      // 捕获错误 (e) 和堆栈 (s)
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            // --- 3. 修改错误 SnackBar ---
            content: Text(
              "$e",
              // 使用 'onError' 颜色，它保证在 'error' 色上清晰可见
              style: TextStyle(color: theme.colorScheme.onError),
            ),
            // 使用 'error' 颜色，它会自动适应深浅色模式
            backgroundColor: theme.colorScheme.error,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    final accounts = ref.watch(accountsProvider);
    final activeAccount = ref.watch(activeAccountProvider);

    // 1. 返回一个 Scaffold
    return Scaffold(
      // 2. 添加 AppBar，并使用 l10n 获取标题
      appBar: AppBar(title: Text(l10n.accounts)),
      // 3. body 是之前返回的 Stack
      body: Stack(
        children: [
          ListView.builder(
            itemCount: accounts.length + 1, // +1 for the add button
            itemBuilder: (context, index) {
              if (index == 0) {
                return Card(
                  margin: const EdgeInsets.all(8.0),
                  child: ListTile(
                    leading: const Icon(Icons.add_circle_outline),
                    title: Text(l10n.new_account),
                    onTap: () => _navigateAndAddAccount(context),
                  ),
                );
              }
              final account = accounts[index - 1];
              final bool isActive = activeAccount?.id == account.id;

              return Card(
                margin: const EdgeInsets.symmetric(
                  horizontal: 8.0,
                  vertical: 4.0,
                ),
                color: null,
                child: ListTile(
                  leading: CircleAvatar(
                    radius: 24,
                    backgroundColor: Colors.transparent,
                    child: Stack(
                      alignment: Alignment.center,
                      children: [
                        const Icon(Icons.person, size: 24),
                        if (account.avatarUrl != null &&
                            account.avatarUrl!.isNotEmpty)
                          ClipOval(
                            child: CachedNetworkImage(
                              imageUrl: account.avatarUrl!,
                              fit: BoxFit.cover,
                              width: 48,
                              height: 48,
                              fadeInDuration: const Duration(milliseconds: 300),
                              fadeOutDuration: const Duration(
                                milliseconds: 100,
                              ),
                              errorWidget: (context, url, error) =>
                                  const SizedBox(),
                            ),
                          ),
                      ],
                    ),
                  ),

                  title: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Text(
                        account.name ?? 'Unknown Name',
                        style: Theme.of(context).textTheme.titleMedium
                            ?.copyWith(fontWeight: FontWeight.bold),
                      ),
                      Text(
                        "@${account.screenName ?? account.id ?? '...'}",
                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                          color: Colors.grey.shade600,
                        ),
                      ),
                      Text(
                        "ID: ${account.id ?? '...'}",
                        style: Theme.of(context).textTheme.bodySmall?.copyWith(
                          color: Colors.grey.shade600,
                        ),
                      ),
                    ],
                  ),

                  trailing: Row(
                    mainAxisSize: MainAxisSize.min, // 保证 Row 不会溢出
                    children: [
                      // 1. "查看 Cookie" 按钮
                      IconButton(
                        icon: const Icon(Icons.cookie_outlined), // 饼干图标
                        tooltip: l10n.view_cookie, // "view_cookie" 作为描述
                        onPressed: () {
                          showDialog(
                            context: context,
                            builder: (context) => AlertDialog(
                              content: SingleChildScrollView(
                                child: SelectableText(account.cookie),
                              ),
                              actions: [
                                TextButton(
                                  onPressed: () => Navigator.pop(context),
                                  // --- 恢复：使用 l10n.ok ---
                                  child: Text(l10n.ok),
                                ),
                              ],
                            ),
                          );
                        },
                      ),
                      // 2. "删除" 按钮
                      IconButton(
                        icon: Icon(
                          Icons.delete_outline,
                          // 添加红色以示警告
                          color: Theme.of(context).colorScheme.error,
                        ),
                        // --- 恢复：使用硬编码的 tooltip ---
                        tooltip: l10n.delete,
                        onPressed: () {
                          // 调用我们刚创建的确认方法
                          _confirmAndDelete(account);
                        },
                      ),
                    ],
                  ),
                ),
              );
            },
          ),
          if (_isLoading)
            Container(
              color: Colors.black.withOpacity(0.5),
              child: Center(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    CircularProgressIndicator(),
                    SizedBox(height: 16),
                    Text(
                      l10n.saving_account,
                      style: TextStyle(color: Colors.white, fontSize: 16),
                    ),
                  ],
                ),
              ),
            ),
        ],
      ),
    );
  }
}


### FILE: ./ui/auth/package.flutter/material.dart
// TODO Implement this library.

### FILE: ./ui/auth/webview_login_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_inappwebview/flutter_inappwebview.dart';
import '../../l10n/app_localizations.dart';

class WebViewLoginPage extends StatefulWidget {
  const WebViewLoginPage({super.key});

  @override
  State<WebViewLoginPage> createState() => _WebViewLoginPageState();
}

class _WebViewLoginPageState extends State<WebViewLoginPage> {
  final Uri _url = Uri.parse('https://x.com/login');
  final CookieManager _cookieManager = CookieManager.instance();

  bool _hasFoundAuthTokenInLastCheck = false;

  Future<void> _onLoginComplete() async {
    if (!mounted) return;

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) =>
          const Center(child: CircularProgressIndicator(strokeWidth: 2)),
    );

    try {
      final WebUri targetUrl = WebUri("https://x.com");

      List<Cookie> gotCookies; // 将 gotCookies 提到 try 块之前

      try {
        // 尝试获取 cookie
        gotCookies = await _cookieManager.getCookies(url: targetUrl);
      } catch (e, s) { // --- 修改点 1：捕获所有 Error 和 Exception ---
        // [已修改] 捕获 *所有* 异常和错误 (StateError, PlatformException, Error, etc.)
        // 只要 getCookies 失败，就视为空列表，让后续逻辑处理 "No cookie found" 提示。
        debugPrint("Error during getCookies, treating as empty list: $e\n$s");
        gotCookies = []; // 手动设置为空列表
      }

      // 先关闭加载圈
      if (!mounted) return;
      // 这一行现在是安全的，因为内部的catch会捕获所有错误
      Navigator.pop(context);

      // 检查 cookie 是否存在 (现在的 gotCookies 可能是 [] 了)
      if (gotCookies.isEmpty) {
        if (!mounted) return;
        final l10n = AppLocalizations.of(context)!;
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text(l10n.no_cookie_found)));
        return;
      }

      // 是否有 auth_token
      final bool hasAuthToken = gotCookies.any((c) => c.name == 'auth_token');
      _hasFoundAuthTokenInLastCheck = hasAuthToken;

      if (!hasAuthToken) {
        if (!mounted) return;
        final l10n = AppLocalizations.of(context)!;
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text(l10n.no_auth_token_found)));
        return;
      }

      // 构造 cookie 字符串
      final String finalCookieString = gotCookies
          .map((c) => '${c.name}=${c.value}')
          .join('; ');

      // 弹出确认框
      final l10n = AppLocalizations.of(context)!;
      final bool? isConfirmed = await showDialog<bool>(
        context: context,
        builder: (context) {
          return AlertDialog(
            title: Text(l10n.cookie),
            content: SingleChildScrollView(
              child: SelectableText(
                finalCookieString,
                style: const TextStyle(fontSize: 12),
              ),
            ),
            actions: [
              TextButton(
                child: Text(l10n.cancel),
                onPressed: () => Navigator.pop(context, false),
              ),
              ElevatedButton(
                child: Text(l10n.ok),
                onPressed: () => Navigator.pop(context, true),
              ),
            ],
          );
        },
      );

      if (isConfirmed == true && mounted) {
        Navigator.pop(context, finalCookieString);
      }
    } catch (e, s) { // --- 修改点 2：捕获所有 Error 和 Exception ---
      debugPrint("Unhandled error in _onLoginComplete: $e\n$s");
      if (mounted) Navigator.pop(context); // 关闭加载圈
      if (mounted) {
        // 其他未预料到的错误仍会在这里显示
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text("$e")));
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    return Scaffold(
      appBar: AppBar(
        title: Text(l10n.browser_login),
        actions: [
          if (_hasFoundAuthTokenInLastCheck)
            Padding(
              padding: const EdgeInsets.only(right: 8.0),
              child: Tooltip(
                message: l10n.found_auth_token_last_check,
                child: const Icon(Icons.check_circle, color: Colors.green),
              ),
            ),
          TextButton(
            onPressed: _onLoginComplete,
            child: Text(l10n.im_logged_in),
          ),
        ],
      ),
      body: InAppWebView(
        initialUrlRequest: URLRequest(url: WebUri.uri(_url)),
        initialSettings: InAppWebViewSettings(
          clearSessionCache: true,
          clearCache: true,
        ),
      ),
    );
  }
}



### FILE: ./ui/commits_page.dart
import 'package:flutter/material.dart';
import '../l10n/app_localizations.dart'; 
class CommitsPage extends StatelessWidget {
  const CommitsPage({super.key});

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    
    return Scaffold(
      // 3. 添加 AppBar
      appBar: AppBar(
        title: Text(l10n.data),
      ),
      body: const Center(
        child: Text('Data Page - Coming Soon'),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // TODO: 在这里添加点击搜索按钮的逻辑
        },
        child: const Icon(Icons.search),
      ),
    );
  }
}

### FILE: ./ui/home_page.dart
import 'dart:math';

import 'package:autonitor/models/twitter_user.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:autonitor/core/data_processor.dart';
import 'package:autonitor/models/cache_data.dart';
import 'package:autonitor/providers/auth_provider.dart';
import 'package:autonitor/ui/user_list_page.dart';
import '../l10n/app_localizations.dart';
import 'package:cached_network_image/cached_network_image.dart';

// --- (Providers... 保持不变) ---
final userListProvider = FutureProvider.family.autoDispose<List<TwitterUser>, String>((
  ref,
  category,
) async {
  final dataProcessor = ref.watch(dataProcessorProvider);
  if (dataProcessor == null) {
    print("userListProvider: DataProcessor is null for category '$category'");
    return [];
  }
  print("userListProvider: Calling getUsers for category '$category'");
  try {
    final users = await dataProcessor.getUsers(category);
    print(
      "userListProvider: getUsers completed for category '$category'. Found ${users.length} users.",
    );
    return users;
  } catch (e, stacktrace) {
    print(
      "userListProvider: !!! ERROR fetching users for category '$category': $e !!!",
    );
    print("userListProvider: Stacktrace: $stacktrace");
    throw Exception('$e');
  }
});

final dataProcessorProvider = Provider.autoDispose<DataProcessor?>((ref) {
  final activeAccount = ref.watch(activeAccountProvider);
  if (activeAccount == null) return null;
  return DataProcessor(account: activeAccount);
});

final cacheProvider = FutureProvider.autoDispose<CacheData?>((ref) async {
  final dataProcessor = ref.watch(dataProcessorProvider);
  if (dataProcessor == null) return null;

  final initialCache = await dataProcessor.getCacheData();
  if (initialCache != null) return initialCache;

  await dataProcessor.runProcess();
  return await dataProcessor.getCacheData();
});
// --- (Providers 结束) ---

class HomePage extends ConsumerWidget {
  final VoidCallback onNavigateToAccounts;

  const HomePage({super.key, required this.onNavigateToAccounts});

  void _showAccountSwitcher(BuildContext context, WidgetRef ref) {
    final l10n = AppLocalizations.of(context)!;
    final allAccounts = ref.read(accountsProvider);
    final activeAccount = ref.read(activeAccountProvider);

    showModalBottomSheet(
      context: context,
      builder: (context) {
        return ListView(
          shrinkWrap: true,
          children: [
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Text(
                l10n.switch_account,
                style: Theme.of(context).textTheme.titleLarge,
              ),
            ),
            ...allAccounts.map((account) {
              return ListTile(
                // 左侧：圆形头像（占位 Icon + 网络图片淡入）并在头像右下角显示绿色勾
                leading: SizedBox(
                  width: 48,
                  height: 48,
                  child: Stack(
                    alignment: Alignment.center,
                    children: [
                      // 底层占位 icon（始终显示）
                      Container(
                        alignment: Alignment.center,
                        child: const Icon(Icons.person, size: 24),
                      ),

                      // 网络头像（若有），使用 imageBuilder 保证 cover 效果
                      if (account.avatarUrl != null &&
                          account.avatarUrl!.isNotEmpty)
                        ClipOval(
                          child: CachedNetworkImage(
                            imageUrl: account.avatarUrl!,
                            fadeInDuration: const Duration(milliseconds: 300),
                            placeholder: (context, url) =>
                                const SizedBox.shrink(),
                            errorWidget: (context, url, error) =>
                                const SizedBox.shrink(),
                            imageBuilder: (context, imageProvider) {
                              return Container(
                                width: 48,
                                height: 48,
                                decoration: BoxDecoration(
                                  image: DecorationImage(
                                    image: imageProvider,
                                    fit: BoxFit.cover,
                                  ),
                                ),
                              );
                            },
                          ),
                        ),

                      // 右下角小绿勾（当 account 为 active 时显示）
                      if (account.id == activeAccount?.id)
                        Positioned(
                          right: 0,
                          bottom: 0,
                          child: Container(
                            width: 18,
                            height: 18,
                            decoration: BoxDecoration(
                              color: Colors.white, // 白色小底让勾在深色头像上可见
                              shape: BoxShape.circle,
                            ),
                            child: const Icon(
                              Icons.check_circle,
                              color: Colors.green,
                              size: 16,
                            ),
                          ),
                        ),
                    ],
                  ),
                ),

                // 中间：name / @screenName / ID 垂直排列（和主页一致）
                title: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Text(
                      account.name ?? 'Unknown Name',
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    Text(
                      "@${account.screenName ?? account.id ?? '...'}",
                      style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                        color: Colors.grey.shade600,
                      ),
                    ),
                    Text(
                      "ID: ${account.id ?? '...'}",
                      style: Theme.of(context).textTheme.bodySmall?.copyWith(
                        color: Colors.grey.shade600,
                      ),
                    ),
                  ],
                ),

                // 右侧：不显示按钮（保留空白）
                trailing: null,

                // 点击仍然切换账号并关闭 bottom sheet（保持原有行为）
                onTap: () {
                  ref.read(activeAccountProvider.notifier).setActive(account);
                  Navigator.pop(context);
                },
              );
            }),
          ],
        );
      },
    );
  }

  Future<void> _navigateToUserList(
    BuildContext context,
    WidgetRef ref,
    String categoryKey,
  ) async {
    print(
      '--- HomePage: Navigating to UserListPage for category key: $categoryKey ---',
    );

    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => UserListPage(title: categoryKey)),
    );
  }

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final l10n = AppLocalizations.of(context)!;
    final activeAccount = ref.watch(activeAccountProvider);

    return Scaffold(
      appBar: AppBar(title: const Text('Autonitor')),
      body: activeAccount == null
          ? _buildNoAccountState(context, onNavigateToAccounts)
          : _buildAccountView(context, ref),

      floatingActionButton: activeAccount == null
          ? null
          : FloatingActionButton.extended(
              onPressed: () async {
                final currentContext = context;
                showDialog(
                  context: currentContext,
                  barrierDismissible: false,
                  builder: (_) =>
                      const Center(child: CircularProgressIndicator()),
                );
                await ref.read(dataProcessorProvider)?.runProcess();
                ref.invalidate(cacheProvider);
                if (currentContext.mounted) {
                  Navigator.pop(currentContext);
                }
              },
              label: Text(l10n.run),
              icon: const Icon(Icons.play_arrow),
            ),
    );
  }

  Widget _buildNoAccountState(BuildContext context, VoidCallback onNavigate) {
    final l10n = AppLocalizations.of(context)!;
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.group_outlined, size: 64, color: Colors.grey.shade400),
            const SizedBox(height: 24),
            Text(
              l10n.login_first,
              style: Theme.of(context).textTheme.headlineSmall,
            ),
            const SizedBox(height: 8),
            Text(l10n.login_first_description, textAlign: TextAlign.center),
            const SizedBox(height: 24),
            ElevatedButton.icon(
              icon: const Icon(Icons.login),
              label: Text(l10n.log_in),
              onPressed: onNavigate,
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(
                  horizontal: 24,
                  vertical: 12,
                ),
                textStyle: Theme.of(context).textTheme.titleMedium,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAccountView(BuildContext context, WidgetRef ref) {
    final cacheAsyncValue = ref.watch(cacheProvider);

    return cacheAsyncValue.when(
      loading: () => const Center(child: CircularProgressIndicator()),
      error: (err, stack) => Center(child: Text('加载缓存失败: $err')),
      data: (cacheData) {
        if (cacheData == null) {
          return _buildEmptyCacheState(context, ref);
        }
        return _buildDataDisplay(context, cacheData, ref);
      },
    );
  }

  Widget _buildEmptyCacheState(BuildContext context, WidgetRef ref) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const Text("尚未生成分析数据"),
          const SizedBox(height: 20),
          ElevatedButton.icon(
            icon: const Icon(Icons.sync),
            onPressed: () => ref.invalidate(cacheProvider),
            label: const Text("立即运行分析"),
          ),
        ],
      ),
    );
  }

  Widget _buildDataDisplay(
    BuildContext context,
    CacheData cache,
    WidgetRef ref,
  ) {
    final l10n = AppLocalizations.of(context)!;
    final activeAccount = ref.watch(activeAccountProvider);

    return RefreshIndicator(
      onRefresh: () async => ref.invalidate(cacheProvider),
      child: ListView(
        padding: const EdgeInsets.all(16.0),
        children: <Widget>[
          Card(
            clipBehavior: Clip.antiAlias,
            margin: EdgeInsets.zero,
            child: Column(
              children: [
                Padding(
                  padding: const EdgeInsets.fromLTRB(16, 16, 16, 12),
                  child: Row(
                    children: [
                      CircleAvatar(
                        radius: 24,
                        backgroundColor: Colors.transparent, // 去掉灰底，让Icon能显示
                        child: Stack(
                          alignment: Alignment.center,
                          children: [
                            const Icon(Icons.person, size: 24),
                            if (activeAccount?.avatarUrl != null &&
                                activeAccount!.avatarUrl!.isNotEmpty)
                              ClipOval(
                                child: CachedNetworkImage(
                                  imageUrl: activeAccount.avatarUrl!,
                                  fit: BoxFit.cover,
                                  width: 48,
                                  height: 48,
                                  fadeInDuration: const Duration(
                                    milliseconds: 300,
                                  ),
                                  fadeOutDuration: const Duration(
                                    milliseconds: 100,
                                  ),
                                  errorWidget: (context, url, error) =>
                                      const SizedBox(),
                                ),
                              ),
                          ],
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              activeAccount?.name ??
                                  'Unknown Name', // 使用 name, 提供 fallback
                              style: Theme.of(context).textTheme.titleMedium
                                  ?.copyWith(fontWeight: FontWeight.bold),
                              maxLines: 1,
                              overflow: TextOverflow.ellipsis,
                            ),
                            Text(
                              "@${activeAccount?.screenName ?? activeAccount?.id ?? '...'}", // 使用 screenName, fallback to id
                              style: Theme.of(context).textTheme.bodyMedium
                                  ?.copyWith(color: Colors.grey.shade600),
                              maxLines: 1,
                              overflow: TextOverflow.ellipsis,
                            ),
                            Text(
                              "ID: ${activeAccount?.id ?? '...'}", // 使用 id (RestId)
                              style: Theme.of(context).textTheme.bodySmall
                                  ?.copyWith(color: Colors.grey.shade600),
                              maxLines: 1,
                              overflow: TextOverflow.ellipsis,
                            ),
                          ],
                        ),
                      ),
                      IconButton(
                        icon: const Icon(Icons.swap_horiz),
                        tooltip: l10n.switch_account,
                        onPressed: () => _showAccountSwitcher(context, ref),
                      ),
                    ],
                  ),
                ),
                const Divider(height: 1, indent: 0, endIndent: 0),
                IntrinsicHeight(
                  child: Row(
                    children: [
                      Expanded(
                        child: InkWell(
                          onTap: () =>
                              _navigateToUserList(context, ref, 'following'),
                          child: Padding(
                            padding: const EdgeInsets.symmetric(vertical: 12.0),
                            child: Column(
                              children: [
                                Text(
                                  cache.followingCount.toString(),
                                  style: Theme.of(context).textTheme.titleMedium
                                      ?.copyWith(fontWeight: FontWeight.bold),
                                ),
                                const SizedBox(height: 2),
                                Text(
                                  l10n.following,
                                  style: Theme.of(context).textTheme.bodySmall,
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                      const VerticalDivider(width: 1),
                      Expanded(
                        child: InkWell(
                          onTap: () =>
                              _navigateToUserList(context, ref, 'followers'),
                          child: Padding(
                            padding: const EdgeInsets.symmetric(vertical: 12.0),
                            child: Column(
                              children: [
                                Text(
                                  cache.followersCount.toString(),
                                  style: Theme.of(context).textTheme.titleMedium
                                      ?.copyWith(fontWeight: FontWeight.bold),
                                ),
                                const SizedBox(height: 2),
                                Text(
                                  l10n.followers,
                                  style: Theme.of(context).textTheme.bodySmall,
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(height: 24),
          Card(
            margin: EdgeInsets.zero,
            child: Column(
              children: [
                _buildDetailListItem(
                  context,
                  ref,
                  'normal_unfollowed',
                  Icons.person_remove_outlined,
                  l10n.normal_unfollowed,
                  cache.unfollowedCount,
                ),
                _buildDetailListItem(
                  context,
                  ref,
                  'mutual_unfollowed',
                  Icons.group_off_rounded,
                  l10n.mutual_unfollowed,
                  cache.mutualUnfollowedCount,
                ),
                _buildDetailListItem(
                  context,
                  ref,
                  'oneway_unfollowed',
                  Icons.group_off_outlined,
                  l10n.oneway_unfollowed,
                  cache.singleUnfollowedCount,
                ),
                _buildDetailListItem(
                  context,
                  ref,
                  'suspended',
                  Icons.lock_outline,
                  l10n.suspended,
                  cache.frozenCount,
                ),
                _buildDetailListItem(
                  context,
                  ref,
                  'deactivated',
                  Icons.no_accounts_outlined,
                  l10n.deactivated,
                  cache.deactivatedCount,
                ),
                _buildDetailListItem(
                  context,
                  ref,
                  'be_followed_back',
                  Icons.group_add_outlined,
                  l10n.be_followed_back,
                  cache.refollowedCount,
                ),
                _buildDetailListItem(
                  context,
                  ref,
                  'new_followers_following',
                  Icons.person_add_alt_1_outlined,
                  l10n.new_followers_following,
                  cache.newFollowersCount,
                  showDivider: false,
                ),
              ],
            ),
          ),
          const SizedBox(height: 80),
        ],
      ),
    );
  }

  Widget _buildDetailListItem(
    BuildContext context,
    WidgetRef ref,
    String categoryKey,
    IconData icon,
    String label,
    int count, {
    bool showDivider = true,
  }) {
    return InkWell(
      onTap: () => _navigateToUserList(context, ref, categoryKey),
      child: Column(
        children: [
          Padding(
            padding: const EdgeInsets.symmetric(
              horizontal: 16.0,
              vertical: 12.0,
            ),
            child: Row(
              children: [
                Icon(icon, color: Theme.of(context).colorScheme.primary),
                const SizedBox(width: 16),
                Expanded(
                  child: Text(
                    label,
                    style: Theme.of(context).textTheme.titleMedium,
                  ),
                ),
                Text(
                  count.toString(),
                  style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                    color: Theme.of(context).colorScheme.secondary,
                  ),
                ),
                const SizedBox(width: 8),
                const Icon(Icons.chevron_right, color: Colors.grey),
              ],
            ),
          ),
          if (showDivider) const Divider(height: 1, indent: 56),
        ],
      ),
    );
  }
}


### FILE: ./ui/main_scaffold.dart
import 'package:flutter/material.dart';
import 'home_page.dart';
import 'commits_page.dart';
import 'accounts_page.dart';
import 'settings_page.dart';
import '../l10n/app_localizations.dart';

class MainScaffold extends StatefulWidget {
  const MainScaffold({super.key});

  @override
  State<MainScaffold> createState() => _MainScaffoldState();
}

class _MainScaffoldState extends State<MainScaffold> {
  int _selectedIndex = 0;

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;

    final List<Widget> pages = <Widget>[
      HomePage(onNavigateToAccounts: () => _onItemTapped(2)),
      CommitsPage(),
      AccountsPage(),
      SettingsPage(),
    ];

    final List<Widget> pagesWithVisibility = <Widget>[
      pages[0], // HomePage
      Visibility(
        visible: _selectedIndex == 1,
        maintainState: false,
        child: pages[1], // CommitsPage
      ),
      pages[2], // AccountsPage
      pages[3], // SettingsPage
    ];

    return Scaffold(
      body: IndexedStack(
        index: _selectedIndex,
        children: pagesWithVisibility,
      ),
      bottomNavigationBar: NavigationBar(
        selectedIndex: _selectedIndex,
        onDestinationSelected: _onItemTapped,
        labelBehavior: NavigationDestinationLabelBehavior.alwaysShow,
        destinations: <NavigationDestination>[
          NavigationDestination(
            icon: const Icon(Icons.home_outlined),
            selectedIcon: const Icon(Icons.home),
            label: l10n.home,
          ),
          NavigationDestination(
            icon: const Icon(Icons.folder_outlined),
            selectedIcon: const Icon(Icons.folder_open_outlined),
            label: l10n.data,
          ),
          NavigationDestination(
            icon: const Icon(Icons.people_alt_outlined),
            selectedIcon: const Icon(Icons.people_alt),
            label: l10n.accounts,
          ),
          NavigationDestination(
            icon: const Icon(Icons.settings_outlined),
            selectedIcon: const Icon(Icons.settings),
            label: l10n.settings,
          ),
        ],
      ),
    );
  }
}


### FILE: ./ui/settings_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../providers/settings_provider.dart';
import '../l10n/app_localizations.dart';

class SettingsPage extends ConsumerStatefulWidget {
  const SettingsPage({super.key});

  @override
  ConsumerState<SettingsPage> createState() => _SettingsPageState();
}

class _SettingsPageState extends ConsumerState<SettingsPage> {
  @override
  Widget build(BuildContext context) {
    // 1. 获取 l10n (您可能需要导入 'l10n/app_localizations.dart')
    final l10n = AppLocalizations.of(context)!;

    // 2. 监听 settingsProvider
    final settingsValue = ref.watch(settingsProvider);

    // 3. 返回一个 Scaffold
    return Scaffold(
      // 4. 添加 AppBar
      appBar: AppBar(title: Text(l10n.settings)),
      // 5. body 是之前的 .when() 逻辑
      body: settingsValue.when(
        // 加载中状态：显示一个加载指示器
        loading: () => const Center(child: CircularProgressIndicator()),
        // 错误状态：显示错误信息
        error: (error, stackTrace) => Center(
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Text('加载设置失败: $error'),
          ),
        ),
        // 数据加载成功状态
        data: (settings) {
          // 构建设置列表 UI
          return ListView(
            children: [
              Padding(
                padding: EdgeInsets.fromLTRB(16, 16, 16, 8),
                child: Text(
                  l10n.general,
                  style: TextStyle(fontSize: 12, color: Colors.grey),
                ),
              ),
              ListTile(
                title: Text(l10n.language),
                leading: Icon(Icons.language),
                trailing: DropdownButton<String>(
                  // 1. 当前选中的值：从 Provider 读取
                  value: settings.locale?.toLanguageTag() ?? 'Auto',

                  // 2. 下拉菜单的选项：创建一个包含所有可选语言的列表
                  items: const [
                    DropdownMenuItem<String>(
                      value: 'Auto',
                      child: Text('Auto'),
                    ),
                    DropdownMenuItem<String>(
                      value: 'en',
                      child: Text('English'),
                    ),
                    DropdownMenuItem<String>(
                      value: 'zh-CN',
                      child: Text('中文（中国）'),
                    ), // value 是 'zh-CN'
                    DropdownMenuItem<String>(
                      value: 'zh-TW',
                      child: Text('中文（台灣）'),
                    ), // value 是 'zh-TW'
                  ],

                  // 3. 当用户选择了新选项时的回调函数
                  onChanged: (String? newValue) {
                    if (newValue != null) {
                      Locale? newLocale; // 声明 newLocale
                      if (newValue == 'Auto') {
                        newLocale = null; // Auto 对应 null Locale
                      } else if (newValue == 'en') {
                        newLocale = const Locale('en');
                      } else if (newValue == 'zh-CN') {
                        newLocale = const Locale(
                          'zh',
                          'CN',
                        ); // 创建 Locale('zh', 'CN')
                      } else if (newValue == 'zh-TW') {
                        newLocale = const Locale('zh', 'TW');
                      }

                      // 调用 updateLocale 传入 Locale?
                      ref
                          .read(settingsProvider.notifier)
                          .updateLocale(newLocale);
                      // 更新提示文本（查找显示名称）
                      String displaySelected = 'Auto';
                      // Default
                      if (newValue == 'en') displaySelected = 'English';
                      if (newValue == 'zh-CN') displaySelected = '中文（中国）';
                      if (newValue == 'zh-TW') displaySelected = '中文（台灣）';
                    }
                  },

                  // 4. (可选) 移除下拉按钮下划线，让它更简洁
                  underline: Container(),
                ),
                // 从加载的设置中获取语言并显示
              ),
              // 未来可以在这里添加其他设置项...
            ],
          );
        },
      ),
    );
  }
}


### FILE: ./ui/user_detail_page.dart
import 'dart:math'; // 导入 math 库以使用 max 函数
import '../l10n/app_localizations.dart';
import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';
import '../models/twitter_user.dart';

class UserDetailPage extends StatelessWidget {
  final TwitterUser user;

  const UserDetailPage({super.key, required this.user});

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    // 1024x341 的宽高比
    const double bannerAspectRatio = 1024 / 341;
    // 按钮高度(MD3 TonalButton 约 40) + 按钮与横幅间距(8)
    const double buttonOverhang = 48.0;
    // 头像半径(45) - 中心点距横幅底部的偏移(5) = 40
    const double avatarOverhang = 40.0;

    // 获取屏幕宽度
    final screenWidth = MediaQuery.of(context).size.width;
    // 计算动态的横幅高度
    final bannerHeight = screenWidth / bannerAspectRatio;
    // 计算 Stack 所需的总高度
    final stackTotalHeight = bannerHeight + max(avatarOverhang, buttonOverhang);

    return Scaffold(
      appBar: AppBar(
        title: Text(user.name),
        actions: [
          IconButton(
            icon: const Icon(Icons.history),
            tooltip: '查看历史',
            onPressed: () {
              // TODO: History 逻辑
            },
          ),
        ],
      ),
      body: ListView(
        padding: EdgeInsets.zero,
        children: [
          Stack(
            clipBehavior: Clip.none,
            // --- 修改 1: 设置对齐方式 ---
            alignment: Alignment.topCenter,
            children: [
              AspectRatio(
                aspectRatio: bannerAspectRatio,
                child: (user.bannerUrl ?? '').isNotEmpty
                    ? Image.network(user.bannerUrl!, fit: BoxFit.cover)
                    : Container(color: Colors.grey.shade300),
              ),
              Positioned(
                left: 16,
                bottom: -avatarOverhang,
                child: Hero(
                  tag: 'avatar_${user.restId}', // 使用与列表页相同的 tag
                  child: CircleAvatar(
                    radius: 45,
                    backgroundColor: Colors.white,
                    child: CircleAvatar(
                      radius: 42,
                      backgroundImage: user.avatarUrl.isNotEmpty
                          ? NetworkImage(user.avatarUrl)
                          : null,
                      child: user.avatarUrl.isEmpty
                          ? const Icon(Icons.person, size: 40)
                          : null,
                    ),
                  ),
                ),
              ),

              // --- 修改 2: 添加透明 SizedBox 撑开 Stack 点击区域 ---
            ],
          ),
          Padding(
            padding: const EdgeInsets.only(
              right: 16.0,
              top: 8.0,
            ), // top可调按钮垂直间距
            child: Align(
              alignment: Alignment.centerRight, // 靠右对齐
              child: FilledButton.tonalIcon(
                onPressed: () {
                  /* TODO: JSON 逻辑 */
                },
                style: FilledButton.styleFrom(
                  backgroundColor: Colors.pink.shade100,
                  foregroundColor: Colors.pink.shade800,
                  padding: const EdgeInsets.symmetric(
                    horizontal: 18,
                    vertical: 8,
                  ), // 控制按钮大小
                ),
                icon: const Icon(Icons.description_outlined, size: 20),
                label: const Text('JSON'),
              ),
            ),
          ),

          // --- 修改 3: 移除之前多余的 SizedBox ---
          const SizedBox(height: 5),

          // --- 新增: 根据最大悬垂物添加必要的间距 ---
          // SizedBox(height: max(avatarOverhang, buttonOverhang) + 8), // 确保内容总是在头像/按钮下方（已减半间距）
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                SelectableText(
                  user.name,
                  style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Text.rich(
                  TextSpan(
                    children: [
                      TextSpan(
                        text: '@',
                        style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                          color: Colors.grey.shade600,
                        ),
                      ),
                      WidgetSpan(
                        alignment: PlaceholderAlignment.baseline,
                        baseline: TextBaseline.alphabetic,
                        child: SelectableText(
                          user.id,
                          style: Theme.of(context).textTheme.bodyLarge
                              ?.copyWith(color: Colors.grey.shade600),
                        ),
                      ),
                    ],
                  ),
                ),

                const SizedBox(height: 4),
                SelectableText(
                  user.bio ?? '',
                  style: Theme.of(context).textTheme.bodyLarge,
                ),
              ],
            ),
          ),
          const SizedBox(height: 5),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16.0),
            child: Wrap(
              spacing: 16.0,
              runSpacing: 4.0,
              children: [
                if (user.location != null && user.location!.isNotEmpty)
                  Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Icon(
                        Icons.location_on_outlined,
                        color: Colors.grey,
                        size: 16,
                      ),
                      const SizedBox(width: 4),
                      Flexible(
                        child: SelectableText(
                          user.location ?? '',
                          style: TextStyle(color: Colors.grey),
                        ),
                      ),
                    ],
                  ),
                if (user.link != null && user.link!.isNotEmpty)
                  Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Icon(Icons.link, color: Colors.grey, size: 16),
                      const SizedBox(width: 4),
                      Flexible(
                        child: InkWell(
                          onTap: () => _launchURL(context, user.link),
                          child: Text(
                            user.link ?? '',
                            style: TextStyle(
                              color: Colors.blue,
                              decoration: TextDecoration.underline,
                              decorationColor: Colors.blue,
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(
                      Icons.calendar_month_outlined,
                      color: Colors.grey,
                      size: 16,
                    ),
                    const SizedBox(width: 4),
                    Flexible(
                      child: Text(
                        '${l10n.joined} ${user.joinTime ?? ''}',
                        style: TextStyle(color: Colors.grey),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          Padding(
            padding: const EdgeInsets.symmetric(
              horizontal: 16.0,
              vertical: 8.0,
            ),
            child: Wrap(
              spacing: 16.0,
              runSpacing: 4.0,
              children: [
                Text.rich(
                  TextSpan(
                    text: user.followingCount.toString(),
                    style: TextStyle(fontWeight: FontWeight.bold),
                    children: [
                      TextSpan(
                        text: ' ${l10n.following}',
                        style: TextStyle(
                          fontWeight: FontWeight.normal,
                          color: Colors.grey,
                        ),
                      ),
                    ],
                  ),
                ),
                Text.rich(
                  TextSpan(
                    text: user.followersCount.toString(),
                    style: TextStyle(fontWeight: FontWeight.bold),
                    children: [
                      TextSpan(
                        text: ' ${l10n.followers}',
                        style: TextStyle(
                          fontWeight: FontWeight.normal,
                          color: Colors.grey,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // —— View on Twitter（两列、标签水平对齐、图标非灰色、链接最多两行） —— //
          Padding(
            padding: const EdgeInsets.fromLTRB(16, 8, 16, 4),
            child: Text(
              l10n.view_on_twitter,
              style: TextStyle(fontSize: 12, color: Colors.grey),
            ),
          ),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16.0),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start, // 顶部对齐，保证两个标签水平对齐
              children: [
                // 第一列：ByScreenName
                Expanded(
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Icon(
                        Icons.link,
                        color: Theme.of(context).colorScheme.primary, // 非灰色
                        size: 16,
                      ),
                      const SizedBox(width: 6),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'ByScreenName',
                              style: TextStyle(
                                fontSize: 12,
                              ),
                            ),
                            const SizedBox(height: 4),
                            InkWell(
                              onTap: () => _launchURL(
                                context,
                                'https://x.com/${user.id}',
                              ),
                              child: Text(
                                'https://x.com/${user.id}',
                                maxLines: 2,
                                overflow: TextOverflow.ellipsis,
                                style: const TextStyle(
                                  color: Colors.blue,
                                  decoration: TextDecoration.underline,
                                  decorationColor: Colors.blue,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),

                const SizedBox(width: 12),

                // 第二列：ByRestId
                Expanded(
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Icon(
                        Icons.link,
                        color: Theme.of(context).colorScheme.primary,
                        size: 16,
                      ),
                      const SizedBox(width: 6),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'ByRestId',
                              style: TextStyle(
                                fontSize: 12,
                              ),
                            ),
                            const SizedBox(height: 4),
                            InkWell(
                              onTap: () => _launchURL(
                                context,
                                'https://x.com/intent/user?user_id=${user.restId}',
                              ),
                              child: Text(
                                'https://x.com/intent/user?user_id=${user.restId}',
                                maxLines: 2,
                                overflow: TextOverflow.ellipsis,
                                style: const TextStyle(
                                  color: Colors.blue,
                                  decoration: TextDecoration.underline,
                                  decorationColor: Colors.blue,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),

          // —— 原有 Metadata 与指标 —— //
          Padding(
            padding: const EdgeInsets.fromLTRB(16, 4, 1, 0),
            child: Text(
              l10n.metadata,
              style: TextStyle(fontSize: 12, color: Colors.grey),
            ),
          ),
          _buildInfoTile(context, Icons.create, l10n.tweets, "65"),
          _buildInfoTile(context, Icons.image, l10n.media_count, "3"),
          _buildInfoTile(context, Icons.favorite, l10n.likes, "100"),
          _buildInfoTile(context, Icons.list_alt, l10n.listed_count, "1"),

          Padding(
            padding: const EdgeInsets.fromLTRB(16, 4, 1, 0),
            child: Text(
              l10n.identity,
              style: TextStyle(fontSize: 12, color: Colors.grey),
            ),
          ),
          _buildInfoTile(context, Icons.fingerprint, "Rest ID", user.restId),
        ],
      ),
    );
  }

  void _launchURL(BuildContext context, String? urlString) async {
    if (urlString == null || urlString.isEmpty) {
      return;
    }
    final Uri? uri = Uri.tryParse(urlString);
    if (uri == null) {
      if (context.mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('无法打开链接: 格式错误')));
      }
      return;
    }
    try {
      await launchUrl(uri, mode: LaunchMode.platformDefault);
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('无法打开链接: $e')));
      }
    }
  }

  Widget _buildInfoTile(
    BuildContext context,
    IconData icon,
    String title,
    String subtitle, {
    bool isUrl = false,
  }) {
    return ListTile(
      leading: Icon(icon, color: Theme.of(context).colorScheme.primary),
      title: Text(title),
      subtitle: SelectableText(
        subtitle,
        style: TextStyle(color: isUrl ? Colors.blue : null),
      ),
      contentPadding: const EdgeInsets.symmetric(horizontal: 16.0),
    );
  }
}


### FILE: ./ui/user_list_page.dart
import 'package:autonitor/ui/home_page.dart'; // 导入 home_page.dart (如果 Provider 在那里)
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart'; // 添加 riverpod 导入
import '../models/twitter_user.dart';
import '../l10n/app_localizations.dart';
import 'user_detail_page.dart';
// import '../providers/user_list_provider.dart'; // 如果单独创建了文件

// --- 修改：改为 ConsumerWidget ---
class UserListPage extends ConsumerWidget {
  final String title;
  // --- 修改：移除 users 参数 ---
  // final List<TwitterUser> users;

  // --- 修改：构造函数只接收 title ---
  const UserListPage({super.key, required this.title});

  @override
  // --- 修改：添加 WidgetRef ref ---
  Widget build(BuildContext context, WidgetRef ref) {
    final l10n = AppLocalizations.of(context)!;
    // --- 修改：监听 Provider 状态 ---
    final userListAsyncValue = ref.watch(userListProvider(title));

    return Scaffold(
      appBar: AppBar(title: Text(title)),
      // --- 修改：使用 AsyncValue.when 处理状态 ---
      body: userListAsyncValue.when(
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stackTrace) => Center(
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Text('$error'),
          ),
        ),
        data: (users) {
          // 注意这里的 users 是从 data 中获取的
          if (users.isEmpty) {
            return Center(child: Text(l10n.empty_list_message));
          }
          // 列表有数据时，显示 ListView.builder
          return ListView.builder(
            itemCount: users.length,
            itemBuilder: (context, index) {
              final user = users[index];
              return ListTile(
                leading: Hero(
                  tag: 'avatar_${user.restId}',
                  child: CircleAvatar(
                    backgroundImage: user.avatarUrl.isNotEmpty
                        ? NetworkImage(user.avatarUrl)
                        : null,
                    child: user.avatarUrl.isEmpty
                        ? const Icon(Icons.person)
                        : null,
                  ),
                ),
                title: Text(user.name),
                subtitle: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text("@${user.id}"),
                    Text(
                      user.bio ?? '',
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                      style: Theme.of(context).textTheme.bodyMedium,
                    ),
                  ],
                ),
                trailing: const Icon(Icons.chevron_right),
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => UserDetailPage(user: user),
                    ),
                  );
                },
              );
            },
          );
        },
      ),
    );
  }
}


